/*!
 * ui-select
 * http://github.com/angular-ui/ui-select
 * Version: 0.19.8 - 2017-04-18T05:43:43.673Z
 * License: MIT
 */
// !function(){"use strict";function e(e){return angular.isUndefined(e)||null===e}var t={TAB:9,ENTER:13,ESC:27,SPACE:32,LEFT:37,UP:38,RIGHT:39,DOWN:40,SHIFT:16,CTRL:17,ALT:18,PAGE_UP:33,PAGE_DOWN:34,HOME:36,END:35,BACKSPACE:8,DELETE:46,COMMAND:91,MAP:{91:"COMMAND",8:"BACKSPACE",9:"TAB",13:"ENTER",16:"SHIFT",17:"CTRL",18:"ALT",19:"PAUSEBREAK",20:"CAPSLOCK",27:"ESC",32:"SPACE",33:"PAGE_UP",34:"PAGE_DOWN",35:"END",36:"HOME",37:"LEFT",38:"UP",39:"RIGHT",40:"DOWN",43:"+",44:"PRINTSCREEN",45:"INSERT",46:"DELETE",48:"0",49:"1",50:"2",51:"3",52:"4",53:"5",54:"6",55:"7",56:"8",57:"9",59:";",61:"=",65:"A",66:"B",67:"C",68:"D",69:"E",70:"F",71:"G",72:"H",73:"I",74:"J",75:"K",76:"L",77:"M",78:"N",79:"O",80:"P",81:"Q",82:"R",83:"S",84:"T",85:"U",86:"V",87:"W",88:"X",89:"Y",90:"Z",96:"0",97:"1",98:"2",99:"3",100:"4",101:"5",102:"6",103:"7",104:"8",105:"9",106:"*",107:"+",109:"-",110:".",111:"/",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NUMLOCK",145:"SCROLLLOCK",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'"},isControl:function(e){var s=e.which;switch(s){case t.COMMAND:case t.SHIFT:case t.CTRL:case t.ALT:return!0}return!!(e.metaKey||e.ctrlKey||e.altKey)},isFunctionKey:function(e){return e=e.which?e.which:e,e>=112&&e<=123},isVerticalMovement:function(e){return~[t.UP,t.DOWN].indexOf(e)},isHorizontalMovement:function(e){return~[t.LEFT,t.RIGHT,t.BACKSPACE,t.DELETE].indexOf(e)},toSeparator:function(e){var s={ENTER:"\n",TAB:"\t",SPACE:" "}[e];return s?s:t[e]?void 0:e}};void 0===angular.element.prototype.querySelectorAll&&(angular.element.prototype.querySelectorAll=function(e){return angular.element(this[0].querySelectorAll(e))}),void 0===angular.element.prototype.closest&&(angular.element.prototype.closest=function(e){for(var t=this[0],s=t.matches||t.webkitMatchesSelector||t.mozMatchesSelector||t.msMatchesSelector;t;){if(s.bind(t)(e))return t;t=t.parentElement}return!1});var s=0,i=angular.module("ui.select",[]).constant("uiSelectConfig",{theme:"bootstrap",searchEnabled:!0,sortable:!1,placeholder:"",refreshDelay:1e3,closeOnSelect:!0,skipFocusser:!1,dropdownPosition:"auto",removeSelected:!0,resetSearchInput:!0,generateId:function(){return s++},appendToBody:!1,spinnerEnabled:!1,spinnerClass:"glyphicon glyphicon-refresh ui-select-spin",backspaceReset:!0}).service("uiSelectMinErr",function(){var e=angular.$$minErr("ui.select");return function(){var t=e.apply(this,arguments),s=t.message.replace(new RegExp("\nhttp://errors.angularjs.org/.*"),"");return new Error(s)}}).directive("uisTranscludeAppend",function(){return{link:function(e,t,s,i,c){c(e,function(e){t.append(e)})}}}).filter("highlight",function(){function e(e){return(""+e).replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")}return function(t,s){return s&&t?(""+t).replace(new RegExp(e(s),"gi"),'<span class="ui-select-highlight">$&</span>'):t}}).factory("uisOffset",["$document","$window",function(e,t){return function(s){var i=s[0].getBoundingClientRect();return{width:i.width||s.prop("offsetWidth"),height:i.height||s.prop("offsetHeight"),top:i.top+(t.pageYOffset||e[0].documentElement.scrollTop),left:i.left+(t.pageXOffset||e[0].documentElement.scrollLeft)}}}]);i.directive("uiSelectChoices",["uiSelectConfig","uisRepeatParser","uiSelectMinErr","$compile","$window",function(e,t,s,i,c){return{restrict:"EA",require:"^uiSelect",replace:!0,transclude:!0,templateUrl:function(t){t.addClass("ui-select-choices");var s=t.parent().attr("theme")||e.theme;return s+"/choices.tpl.html"},compile:function(i,n){if(!n.repeat)throw s("repeat","Expected 'repeat' expression.");var l=n.groupBy,a=n.groupFilter;if(l){var r=i.querySelectorAll(".ui-select-choices-group");if(1!==r.length)throw s("rows","Expected 1 .ui-select-choices-group but got '{0}'.",r.length);r.attr("ng-repeat",t.getGroupNgRepeatExpression())}var o=t.parse(n.repeat),u=i.querySelectorAll(".ui-select-choices-row");if(1!==u.length)throw s("rows","Expected 1 .ui-select-choices-row but got '{0}'.",u.length);u.attr("ng-repeat",o.repeatExpression(l)).attr("ng-if","$select.open");var d=i.querySelectorAll(".ui-select-choices-row-inner");if(1!==d.length)throw s("rows","Expected 1 .ui-select-choices-row-inner but got '{0}'.",d.length);d.attr("uis-transclude-append","");var p=c.document.addEventListener?u:d;return p.attr("ng-click","$select.select("+o.itemName+",$select.skipFocusser,$event)"),function(t,s,c,n){n.parseRepeatAttr(c.repeat,l,a),n.disableChoiceExpression=c.uiDisableChoice,n.onHighlightCallback=c.onHighlight,n.minimumInputLength=parseInt(c.minimumInputLength)||0,n.dropdownPosition=c.position?c.position.toLowerCase():e.dropdownPosition,t.$watch("$select.search",function(e){e&&!n.open&&n.multiple&&n.activate(!1,!0),n.activeIndex=n.tagging.isActivated?-1:0,!c.minimumInputLength||n.search.length>=c.minimumInputLength?n.refresh(c.refresh):n.items=[]}),c.$observe("refreshDelay",function(){var s=t.$eval(c.refreshDelay);n.refreshDelay=void 0!==s?s:e.refreshDelay}),t.$watch("$select.open",function(e){e?(i.attr("role","listbox"),n.refresh(c.refresh)):s.removeAttr("role")})}}}}]),i.controller("uiSelectCtrl",["$scope","$element","$timeout","$filter","$$uisDebounce","uisRepeatParser","uiSelectMinErr","uiSelectConfig","$parse","$injector","$window",function(s,i,c,n,l,a,r,o,u,d,p){function h(e,t,s){if(e.findIndex)return e.findIndex(t,s);for(var i,c=Object(e),n=c.length>>>0,l=0;l<n;l++)if(i=c[l],t.call(s,i,l,c))return l;return-1}function g(){y.resetSearchInput&&(y.search=x,y.selected&&y.items.length&&!y.multiple&&(y.activeIndex=h(y.items,function(e){return angular.equals(this,e)},y.selected)))}function f(e,t){var s,i,c=[];for(s=0;s<t.length;s++)for(i=0;i<e.length;i++)e[i].name==[t[s]]&&c.push(e[i]);return c}function v(e,t){var s=I.indexOf(e);t&&s===-1&&I.push(e),!t&&s>-1&&I.splice(s,1)}function m(e){return I.indexOf(e)>-1}function $(e){function t(e,t){var s=i.indexOf(e);t&&s===-1&&i.push(e),!t&&s>-1&&i.splice(s,1)}function s(e){return i.indexOf(e)>-1}if(e){var i=[];y.isLocked=function(e,i){var c=!1,n=y.selected[i];return n&&(e?(c=!!e.$eval(y.lockChoiceExpression),t(n,c)):c=s(n)),c}}}function b(e){var s=!0;switch(e){case t.DOWN:if(!y.open&&y.multiple)y.activate(!1,!0);else if(y.activeIndex<y.items.length-1)for(var i=++y.activeIndex;m(y.items[i])&&i<y.items.length;)y.activeIndex=++i;break;case t.UP:var c=0===y.search.length&&y.tagging.isActivated?-1:0;if(!y.open&&y.multiple)y.activate(!1,!0);else if(y.activeIndex>c)for(var n=--y.activeIndex;m(y.items[n])&&n>c;)y.activeIndex=--n;break;case t.TAB:y.multiple&&!y.open||y.select(y.items[y.activeIndex],!0);break;case t.ENTER:y.open&&(y.tagging.isActivated||y.activeIndex>=0)?y.select(y.items[y.activeIndex],y.skipFocusser):y.activate(!1,!0);break;case t.ESC:y.close();break;default:s=!1}return s}function w(){var e=i.querySelectorAll(".ui-select-choices-content"),t=e.querySelectorAll(".ui-select-choices-row");if(t.length<1)throw r("choices","Expected multiple .ui-select-choices-row but got '{0}'.",t.length);if(!(y.activeIndex<0)){var s=t[y.activeIndex],c=s.offsetTop+s.clientHeight-e[0].scrollTop,n=e[0].offsetHeight;c>n?e[0].scrollTop+=c-n:c<s.clientHeight&&(y.isGrouped&&0===y.activeIndex?e[0].scrollTop=0:e[0].scrollTop-=s.clientHeight-c)}}var y=this,x="";if(y.placeholder=o.placeholder,y.searchEnabled=o.searchEnabled,y.sortable=o.sortable,y.refreshDelay=o.refreshDelay,y.paste=o.paste,y.resetSearchInput=o.resetSearchInput,y.refreshing=!1,y.spinnerEnabled=o.spinnerEnabled,y.spinnerClass=o.spinnerClass,y.removeSelected=o.removeSelected,y.closeOnSelect=!0,y.skipFocusser=!1,y.search=x,y.activeIndex=0,y.items=[],y.open=!1,y.focus=!1,y.disabled=!1,y.selected=void 0,y.dropdownPosition="auto",y.focusser=void 0,y.multiple=void 0,y.disableChoiceExpression=void 0,y.tagging={isActivated:!1,fct:void 0},y.taggingTokens={isActivated:!1,tokens:void 0},y.lockChoiceExpression=void 0,y.clickTriggeredSelect=!1,y.$filter=n,y.$element=i,y.$animate=function(){try{return d.get("$animate")}catch(e){return null}}(),y.searchInput=i.querySelectorAll("input.ui-select-search"),1!==y.searchInput.length)throw r("searchInput","Expected 1 input.ui-select-search but got '{0}'.",y.searchInput.length);y.isEmpty=function(){return e(y.selected)||""===y.selected||y.multiple&&0===y.selected.length},y.activate=function(e,t){if(y.disabled||y.open)y.open&&!y.searchEnabled&&y.close();else{t||g(),s.$broadcast("uis:activate"),y.open=!0,y.activeIndex=y.activeIndex>=y.items.length?0:y.activeIndex,y.activeIndex===-1&&y.taggingLabel!==!1&&(y.activeIndex=0);var n=i.querySelectorAll(".ui-select-choices-content"),l=i.querySelectorAll(".ui-select-search");if(y.$animate&&y.$animate.on&&y.$animate.enabled(n[0])){var a=function(t,s){"start"===s&&0===y.items.length?(y.$animate.off("removeClass",l[0],a),c(function(){y.focusSearchInput(e)})):"close"===s&&(y.$animate.off("enter",n[0],a),c(function(){y.focusSearchInput(e)}))};y.items.length>0?y.$animate.on("enter",n[0],a):y.$animate.on("removeClass",l[0],a)}else c(function(){y.focusSearchInput(e),!y.tagging.isActivated&&y.items.length>1&&w()})}},y.focusSearchInput=function(e){y.search=e||y.search,y.searchInput[0].focus()},y.findGroupByName=function(e){return y.groups&&y.groups.filter(function(t){return t.name===e})[0]},y.parseRepeatAttr=function(e,t,i){function c(e){var c=s.$eval(t);if(y.groups=[],angular.forEach(e,function(e){var t=angular.isFunction(c)?c(e):e[c],s=y.findGroupByName(t);s?s.items.push(e):y.groups.push({name:t,items:[e]})}),i){var n=s.$eval(i);angular.isFunction(n)?y.groups=n(y.groups):angular.isArray(n)&&(y.groups=f(y.groups,n))}y.items=[],y.groups.forEach(function(e){y.items=y.items.concat(e.items)})}function n(e){y.items=e||[]}y.setItemsFn=t?c:n,y.parserResult=a.parse(e),y.isGrouped=!!t,y.itemProperty=y.parserResult.itemName;var l=y.parserResult.source,o=function(){var e=l(s);s.$uisSource=Object.keys(e).map(function(t){var s={};return s[y.parserResult.keyName]=t,s.value=e[t],s})};y.parserResult.keyName&&(o(),y.parserResult.source=u("$uisSource"+y.parserResult.filters),s.$watch(l,function(e,t){e!==t&&o()},!0)),y.refreshItems=function(e){e=e||y.parserResult.source(s);var t=y.selected;if(y.isEmpty()||angular.isArray(t)&&!t.length||!y.multiple||!y.removeSelected)y.setItemsFn(e);else if(void 0!==e&&null!==e){var i=e.filter(function(e){return angular.isArray(t)?t.every(function(t){return!angular.equals(e,t)}):!angular.equals(e,t)});y.setItemsFn(i)}"auto"!==y.dropdownPosition&&"up"!==y.dropdownPosition||s.calculateDropdownPos(),s.$broadcast("uis:refresh")},s.$watchCollection(y.parserResult.source,function(e){if(void 0===e||null===e)y.items=[];else{if(!angular.isArray(e))throw r("items","Expected an array but got '{0}'.",e);y.refreshItems(e),angular.isDefined(y.ngModel.$modelValue)&&(y.ngModel.$modelValue=null)}})};var E;y.refresh=function(e){void 0!==e&&(E&&c.cancel(E),E=c(function(){if(s.$select.search.length>=s.$select.minimumInputLength){var t=s.$eval(e);t&&angular.isFunction(t.then)&&!y.refreshing&&(y.refreshing=!0,t["finally"](function(){y.refreshing=!1}))}},y.refreshDelay))},y.isActive=function(e){if(!y.open)return!1;var t=y.items.indexOf(e[y.itemProperty]),s=t==y.activeIndex;return!(!s||t<0)&&(s&&!angular.isUndefined(y.onHighlightCallback)&&e.$eval(y.onHighlightCallback),s)};var S=function(e){return y.selected&&angular.isArray(y.selected)&&y.selected.filter(function(t){return angular.equals(t,e)}).length>0},I=[];y.isDisabled=function(e){if(y.open){var t=e[y.itemProperty],s=y.items.indexOf(t),i=!1;if(s>=0&&(angular.isDefined(y.disableChoiceExpression)||y.multiple)){if(t.isTag)return!1;y.multiple&&(i=S(t)),!i&&angular.isDefined(y.disableChoiceExpression)&&(i=!!e.$eval(y.disableChoiceExpression)),v(t,i)}return i}},y.select=function(t,i,c){if(e(t)||!m(t)){if(!y.items&&!y.search&&!y.tagging.isActivated)return;if(!t||!m(t)){if(y.clickTriggeredSelect=!1,c&&("click"===c.type||"touchend"===c.type)&&t&&(y.clickTriggeredSelect=!0),y.tagging.isActivated&&y.clickTriggeredSelect===!1){if(y.taggingLabel===!1)if(y.activeIndex<0){if(void 0===t&&(t=void 0!==y.tagging.fct?y.tagging.fct(y.search):y.search),!t||angular.equals(y.items[0],t))return}else t=y.items[y.activeIndex];else if(0===y.activeIndex){if(void 0===t)return;if(void 0!==y.tagging.fct&&"string"==typeof t){if(t=y.tagging.fct(t),!t)return}else"string"==typeof t&&(t=t.replace(y.taggingLabel,"").trim())}if(S(t))return void y.close(i)}g(),s.$broadcast("uis:select",t),y.closeOnSelect&&y.close(i)}}},y.close=function(e){y.open&&(y.ngModel&&y.ngModel.$setTouched&&y.ngModel.$setTouched(),y.open=!1,g(),s.$broadcast("uis:close",e))},y.setFocus=function(){y.focus||y.focusInput[0].focus()},y.clear=function(e){y.select(null),e.stopPropagation(),c(function(){y.focusser[0].focus()},0,!1)},y.toggle=function(e){y.open?(y.close(),e.preventDefault(),e.stopPropagation()):y.activate()},y.isLocked=function(){return!1},s.$watch(function(){return angular.isDefined(y.lockChoiceExpression)&&""!==y.lockChoiceExpression},$);var C=null,k=!1;y.sizeSearchInput=function(){var e=y.searchInput[0],t=y.$element[0],i=function(){return t.clientWidth*!!e.offsetParent},n=function(t){if(0===t)return!1;var s=t-e.offsetLeft;return s<50&&(s=t),y.searchInput.css("width",s+"px"),!0};y.searchInput.css("width","10px"),c(function(){null!==C||n(i())||(C=s.$watch(function(){k||(k=!0,s.$$postDigest(function(){k=!1,n(i())&&(C(),C=null)}))},angular.noop))})},y.searchInput.on("keydown",function(e){var i=e.which;~[t.ENTER,t.ESC].indexOf(i)&&(e.preventDefault(),e.stopPropagation()),s.$apply(function(){var s=!1;if((y.items.length>0||y.tagging.isActivated)&&(b(i)||y.searchEnabled||(e.preventDefault(),e.stopPropagation()),y.taggingTokens.isActivated)){for(var n=0;n<y.taggingTokens.tokens.length;n++)y.taggingTokens.tokens[n]===t.MAP[e.keyCode]&&y.search.length>0&&(s=!0);s&&c(function(){y.searchInput.triggerHandler("tagged");var s=y.search.replace(t.MAP[e.keyCode],"").trim();y.tagging.fct&&(s=y.tagging.fct(s)),s&&y.select(s,!0)})}}),t.isVerticalMovement(i)&&y.items.length>0&&w(),i!==t.ENTER&&i!==t.ESC||(e.preventDefault(),e.stopPropagation())}),y.searchInput.on("paste",function(e){var s;if(s=window.clipboardData&&window.clipboardData.getData?window.clipboardData.getData("Text"):(e.originalEvent||e).clipboardData.getData("text/plain"),s=y.search+s,s&&s.length>0)if(y.taggingTokens.isActivated){for(var i=[],c=0;c<y.taggingTokens.tokens.length;c++){var n=t.toSeparator(y.taggingTokens.tokens[c])||y.taggingTokens.tokens[c];if(s.indexOf(n)>-1){i=s.split(n);break}}0===i.length&&(i=[s]);var l=y.search;angular.forEach(i,function(e){var t=y.tagging.fct?y.tagging.fct(e):e;t&&y.select(t,!0)}),y.search=l||x,e.preventDefault(),e.stopPropagation()}else y.paste&&(y.paste(s),y.search=x,e.preventDefault(),e.stopPropagation())}),y.searchInput.on("tagged",function(){c(function(){g()})});var A=l(function(){y.sizeSearchInput()},50);angular.element(p).bind("resize",A),s.$on("$destroy",function(){y.searchInput.off("keyup keydown tagged blur paste"),angular.element(p).off("resize",A)}),s.$watch("$select.activeIndex",function(e){e&&i.find("input").attr("aria-activedescendant","ui-select-choices-row-"+y.generatedId+"-"+e)}),s.$watch("$select.open",function(e){e||i.find("input").removeAttr("aria-activedescendant")})}]),i.directive("uiSelect",["$document","uiSelectConfig","uiSelectMinErr","uisOffset","$compile","$parse","$timeout",function(e,t,s,i,c,n,l){return{restrict:"EA",templateUrl:function(e,s){var i=s.theme||t.theme;return i+(angular.isDefined(s.multiple)?"/select-multiple.tpl.html":"/select.tpl.html")},replace:!0,transclude:!0,require:["uiSelect","^ngModel"],scope:!0,controller:"uiSelectCtrl",controllerAs:"$select",compile:function(c,a){var r=/{(.*)}\s*{(.*)}/.exec(a.ngClass);if(r){var o="{"+r[1]+", "+r[2]+"}";a.ngClass=o,c.attr("ng-class",o)}return angular.isDefined(a.multiple)?c.append("<ui-select-multiple/>").removeAttr("multiple"):c.append("<ui-select-single/>"),a.inputId&&(c.querySelectorAll("input.ui-select-search")[0].id=a.inputId),function(c,a,r,o,u){function d(e){if(g.open){var t=!1;if(t=window.jQuery?window.jQuery.contains(a[0],e.target):a[0].contains(e.target),!t&&!g.clickTriggeredSelect){var s;if(g.skipFocusser)s=!0;else{var i=["input","button","textarea","select"],n=angular.element(e.target).controller("uiSelect");s=n&&n!==g,s||(s=~i.indexOf(e.target.tagName.toLowerCase()))}g.close(s),c.$digest()}g.clickTriggeredSelect=!1}}function p(){var t=i(a);m=angular.element('<div class="ui-select-placeholder"></div>'),m[0].style.width=t.width+"px",m[0].style.height=t.height+"px",a.after(m),$=a[0].style.width,e.find("body").append(a),a[0].style.position="absolute",a[0].style.left=t.left+"px",a[0].style.top=t.top+"px",a[0].style.width=t.width+"px"}function h(){null!==m&&(m.replaceWith(a),m=null,a[0].style.position="",a[0].style.left="",a[0].style.top="",a[0].style.width=$,g.setFocus())}var g=o[0],f=o[1];g.generatedId=t.generateId(),g.baseTitle=r.title||"Select box",g.focusserTitle=g.baseTitle+" focus",g.focusserId="focusser-"+g.generatedId,g.closeOnSelect=function(){return angular.isDefined(r.closeOnSelect)?n(r.closeOnSelect)():t.closeOnSelect}(),c.$watch("skipFocusser",function(){var e=c.$eval(r.skipFocusser);g.skipFocusser=void 0!==e?e:t.skipFocusser}),g.onSelectCallback=n(r.onSelect),g.onRemoveCallback=n(r.onRemove),g.ngModel=f,g.choiceGrouped=function(e){return g.isGrouped&&e&&e.name},r.tabindex&&r.$observe("tabindex",function(e){g.focusInput.attr("tabindex",e),a.removeAttr("tabindex")}),c.$watch(function(){return c.$eval(r.searchEnabled)},function(e){g.searchEnabled=void 0!==e?e:t.searchEnabled}),c.$watch("sortable",function(){var e=c.$eval(r.sortable);g.sortable=void 0!==e?e:t.sortable}),r.$observe("backspaceReset",function(){var e=c.$eval(r.backspaceReset);g.backspaceReset=void 0===e||e}),r.$observe("limit",function(){g.limit=angular.isDefined(r.limit)?parseInt(r.limit,10):void 0}),c.$watch("removeSelected",function(){var e=c.$eval(r.removeSelected);g.removeSelected=void 0!==e?e:t.removeSelected}),r.$observe("disabled",function(){g.disabled=void 0!==r.disabled&&r.disabled}),r.$observe("resetSearchInput",function(){var e=c.$eval(r.resetSearchInput);g.resetSearchInput=void 0===e||e}),r.$observe("paste",function(){g.paste=c.$eval(r.paste)}),r.$observe("tagging",function(){if(void 0!==r.tagging){var e=c.$eval(r.tagging);g.tagging={isActivated:!0,fct:e!==!0?e:void 0}}else g.tagging={isActivated:!1,fct:void 0}}),r.$observe("taggingLabel",function(){void 0!==r.tagging&&("false"===r.taggingLabel?g.taggingLabel=!1:g.taggingLabel=void 0!==r.taggingLabel?r.taggingLabel:"(new)")}),r.$observe("taggingTokens",function(){if(void 0!==r.tagging){var e=void 0!==r.taggingTokens?r.taggingTokens.split("|"):[",","ENTER"];g.taggingTokens={isActivated:!0,tokens:e}}}),r.$observe("spinnerEnabled",function(){var e=c.$eval(r.spinnerEnabled);g.spinnerEnabled=void 0!==e?e:t.spinnerEnabled}),r.$observe("spinnerClass",function(){var e=r.spinnerClass;g.spinnerClass=void 0!==e?r.spinnerClass:t.spinnerClass}),angular.isDefined(r.autofocus)&&l(function(){g.setFocus()}),angular.isDefined(r.focusOn)&&c.$on(r.focusOn,function(){l(function(){g.setFocus()})}),e.on("click",d),c.$on("$destroy",function(){e.off("click",d)}),u(c,function(e){var t=angular.element("<div>").append(e),i=t.querySelectorAll(".ui-select-match");if(i.removeAttr("ui-select-match"),i.removeAttr("data-ui-select-match"),1!==i.length)throw s("transcluded","Expected 1 .ui-select-match but got '{0}'.",i.length);a.querySelectorAll(".ui-select-match").replaceWith(i);var c=t.querySelectorAll(".ui-select-choices");if(c.removeAttr("ui-select-choices"),c.removeAttr("data-ui-select-choices"),1!==c.length)throw s("transcluded","Expected 1 .ui-select-choices but got '{0}'.",c.length);a.querySelectorAll(".ui-select-choices").replaceWith(c);var n=t.querySelectorAll(".ui-select-no-choice");n.removeAttr("ui-select-no-choice"),n.removeAttr("data-ui-select-no-choice"),1==n.length&&a.querySelectorAll(".ui-select-no-choice").replaceWith(n)});var v=c.$eval(r.appendToBody);(void 0!==v?v:t.appendToBody)&&(c.$watch("$select.open",function(e){e?p():h()}),c.$on("$destroy",function(){h()}));var m=null,$="",b=null,w="direction-up";c.$watch("$select.open",function(){"auto"!==g.dropdownPosition&&"up"!==g.dropdownPosition||c.calculateDropdownPos()});var y=function(e,t){e=e||i(a),t=t||i(b),b[0].style.position="absolute",b[0].style.top=t.height*-1+"px",a.addClass(w)},x=function(e,t){a.removeClass(w),e=e||i(a),t=t||i(b),b[0].style.position="",b[0].style.top=""},E=function(){l(function(){if("up"===g.dropdownPosition)y();else{a.removeClass(w);var t=i(a),s=i(b),c=e[0].documentElement.scrollTop||e[0].body.scrollTop;t.top+t.height+s.height>c+e[0].documentElement.clientHeight?y(t,s):x(t,s)}b[0].style.opacity=1})},S=!1;c.calculateDropdownPos=function(){if(g.open){if(b=angular.element(a).querySelectorAll(".ui-select-dropdown"),0===b.length)return;if(""!==g.search||S||(b[0].style.opacity=0,S=!0),!i(b).height&&g.$animate&&g.$animate.on&&g.$animate.enabled(b)){var e=!0;g.$animate.on("enter",b,function(t,s){"close"===s&&e&&(E(),e=!1)})}else E()}else{if(null===b||0===b.length)return;b[0].style.opacity=0,b[0].style.position="",b[0].style.top="",a.removeClass(w)}}}}}}]),i.directive("uiSelectMatch",["uiSelectConfig",function(e){function t(e,t){return e[0].hasAttribute(t)?e.attr(t):e[0].hasAttribute("data-"+t)?e.attr("data-"+t):e[0].hasAttribute("x-"+t)?e.attr("x-"+t):void 0}return{restrict:"EA",require:"^uiSelect",replace:!0,transclude:!0,templateUrl:function(s){s.addClass("ui-select-match");var i=s.parent(),c=t(i,"theme")||e.theme,n=angular.isDefined(t(i,"multiple"));return c+(n?"/match-multiple.tpl.html":"/match.tpl.html")},link:function(t,s,i,c){function n(e){c.allowClear=!!angular.isDefined(e)&&(""===e||"true"===e.toLowerCase())}c.lockChoiceExpression=i.uiLockChoice,i.$observe("placeholder",function(t){c.placeholder=void 0!==t?t:e.placeholder}),i.$observe("allowClear",n),n(i.allowClear),c.multiple&&c.sizeSearchInput()}}}]),i.directive("uiSelectMultiple",["uiSelectMinErr","$timeout",function(s,i){return{restrict:"EA",require:["^uiSelect","^ngModel"],controller:["$scope","$timeout",function(e,t){var s,i=this,c=e.$select;angular.isUndefined(c.selected)&&(c.selected=[]),e.$evalAsync(function(){s=e.ngModel}),i.activeMatchIndex=-1,i.updateModel=function(){s.$setViewValue(Date.now()),i.refreshComponent()},i.refreshComponent=function(){c.refreshItems&&c.refreshItems(),c.sizeSearchInput&&c.sizeSearchInput()},i.removeChoice=function(s){if(c.isLocked(null,s))return!1;var n=c.selected[s],l={};return l[c.parserResult.itemName]=n,c.selected.splice(s,1),i.activeMatchIndex=-1,c.sizeSearchInput(),t(function(){c.onRemoveCallback(e,{$item:n,$model:c.parserResult.modelMapper(e,l)})}),i.updateModel(),!0},i.getPlaceholder=function(){if(!c.selected||!c.selected.length)return c.placeholder}}],controllerAs:"$selectMultiple",link:function(c,n,l,a){function r(e){return angular.isNumber(e.selectionStart)?e.selectionStart:e.value.length}function o(e){function s(){switch(e){case t.LEFT:return~g.activeMatchIndex?u:l;case t.RIGHT:return~g.activeMatchIndex&&a!==l?o:(p.activate(),!1);case t.BACKSPACE:return~g.activeMatchIndex?g.removeChoice(a)?u:a:l;case t.DELETE:return!!~g.activeMatchIndex&&(g.removeChoice(g.activeMatchIndex),a)}}var i=r(p.searchInput[0]),c=p.selected.length,n=0,l=c-1,a=g.activeMatchIndex,o=g.activeMatchIndex+1,u=g.activeMatchIndex-1,d=a;return!(i>0||p.search.length&&e==t.RIGHT)&&(p.close(),d=s(),p.selected.length&&d!==!1?g.activeMatchIndex=Math.min(l,Math.max(n,d)):g.activeMatchIndex=-1,!0)}function u(e){if(void 0===e||void 0===p.search)return!1;var t=e.filter(function(e){return void 0!==p.search.toUpperCase()&&void 0!==e&&e.toUpperCase()===p.search.toUpperCase()}).length>0;return t}function d(e,t){var s=-1;if(angular.isArray(e))for(var i=angular.copy(e),c=0;c<i.length;c++)if(void 0===p.tagging.fct)i[c]+" "+p.taggingLabel===t&&(s=c);else{var n=i[c];angular.isObject(n)&&(n.isTag=!0),angular.equals(n,t)&&(s=c)}return s}var p=a[0],h=c.ngModel=a[1],g=c.$selectMultiple;p.multiple=!0,p.focusInput=p.searchInput,h.$isEmpty=function(e){return!e||0===e.length},h.$parsers.unshift(function(){for(var e,t={},s=[],i=p.selected.length-1;i>=0;i--)t={},t[p.parserResult.itemName]=p.selected[i],e=p.parserResult.modelMapper(c,t),s.unshift(e);return s}),h.$formatters.unshift(function(e){var t,s=p.parserResult&&p.parserResult.source(c,{$select:{search:""}}),i={};if(!s)return e;var n=[],l=function(e,s){if(e&&e.length){for(var l=e.length-1;l>=0;l--){if(i[p.parserResult.itemName]=e[l],t=p.parserResult.modelMapper(c,i),p.parserResult.trackByExp){var a=/(\w*)\./.exec(p.parserResult.trackByExp),r=/\.([^\s]+)/.exec(p.parserResult.trackByExp);if(a&&a.length>0&&a[1]==p.parserResult.itemName&&r&&r.length>0&&t[r[1]]==s[r[1]])return n.unshift(e[l]),!0}if(angular.equals(t,s))return n.unshift(e[l]),!0}return!1}};if(!e)return n;for(var a=e.length-1;a>=0;a--)l(p.selected,e[a])||l(s,e[a])||n.unshift(e[a]);return n}),c.$watchCollection(function(){return h.$modelValue},function(e,t){t!=e&&(angular.isDefined(h.$modelValue)&&(h.$modelValue=null),g.refreshComponent())}),h.$render=function(){if(!angular.isArray(h.$viewValue)){if(!e(h.$viewValue))throw s("multiarr","Expected model value to be array but got '{0}'",h.$viewValue);h.$viewValue=[]}p.selected=h.$viewValue,g.refreshComponent(),c.$evalAsync()},c.$on("uis:select",function(e,t){if(!(p.selected.length>=p.limit)){p.selected.push(t);var s={};s[p.parserResult.itemName]=t,i(function(){p.onSelectCallback(c,{$item:t,$model:p.parserResult.modelMapper(c,s)})}),g.updateModel()}}),c.$on("uis:activate",function(){g.activeMatchIndex=-1}),c.$watch("$select.disabled",function(e,t){t&&!e&&p.sizeSearchInput()}),p.searchInput.on("keydown",function(e){var s=e.which;c.$apply(function(){var i=!1;t.isHorizontalMovement(s)&&(i=o(s)),i&&s!=t.TAB&&(e.preventDefault(),e.stopPropagation())})}),p.searchInput.on("keyup",function(e){if(t.isVerticalMovement(e.which)||c.$evalAsync(function(){p.activeIndex=p.taggingLabel===!1?-1:0}),p.tagging.isActivated&&p.search.length>0){if(e.which===t.TAB||t.isControl(e)||t.isFunctionKey(e)||e.which===t.ESC||t.isVerticalMovement(e.which))return;if(p.activeIndex=p.taggingLabel===!1?-1:0,p.taggingLabel===!1)return;var s,i,n,l,a=angular.copy(p.items),r=angular.copy(p.items),o=!1,h=-1;if(void 0!==p.tagging.fct){if(n=p.$filter("filter")(a,{isTag:!0}),n.length>0&&(l=n[0]),a.length>0&&l&&(o=!0,a=a.slice(1,a.length),r=r.slice(1,r.length)),s=p.tagging.fct(p.search),r.some(function(e){return angular.equals(e,s)})||p.selected.some(function(e){return angular.equals(e,s)}))return void c.$evalAsync(function(){p.activeIndex=0,p.items=a});s&&(s.isTag=!0)}else{if(n=p.$filter("filter")(a,function(e){return e.match(p.taggingLabel)}),n.length>0&&(l=n[0]),i=a[0],void 0!==i&&a.length>0&&l&&(o=!0,a=a.slice(1,a.length),r=r.slice(1,r.length)),s=p.search+" "+p.taggingLabel,d(p.selected,p.search)>-1)return;if(u(r.concat(p.selected)))return void(o&&(a=r,c.$evalAsync(function(){p.activeIndex=0,p.items=a})));if(u(r))return void(o&&(p.items=r.slice(1,r.length)))}o&&(h=d(p.selected,s)),h>-1?a=a.slice(h+1,a.length-1):(a=[],s&&a.push(s),a=a.concat(r)),c.$evalAsync(function(){if(p.activeIndex=0,p.items=a,p.isGrouped){var e=s?a.slice(1):a;p.setItemsFn(e),s&&(p.items.unshift(s),p.groups.unshift({name:"",items:[s],tagging:!0}))}})}}),p.searchInput.on("blur",function(){i(function(){g.activeMatchIndex=-1})})}}}]),i.directive("uiSelectNoChoice",["uiSelectConfig",function(e){return{restrict:"EA",require:"^uiSelect",replace:!0,transclude:!0,templateUrl:function(t){t.addClass("ui-select-no-choice");var s=t.parent().attr("theme")||e.theme;return s+"/no-choice.tpl.html"}}}]),i.directive("uiSelectSingle",["$timeout","$compile",function(s,i){return{restrict:"EA",require:["^uiSelect","^ngModel"],link:function(c,n,l,a){var r=a[0],o=a[1];o.$parsers.unshift(function(t){if(e(t))return t;var s,i={};return i[r.parserResult.itemName]=t,s=r.parserResult.modelMapper(c,i)}),o.$formatters.unshift(function(t){if(e(t))return t;var s,i=r.parserResult&&r.parserResult.source(c,{$select:{search:""}}),n={};if(i){var l=function(e){return n[r.parserResult.itemName]=e,s=r.parserResult.modelMapper(c,n),s===t};if(r.selected&&l(r.selected))return r.selected;for(var a=i.length-1;a>=0;a--)if(l(i[a]))return i[a]}return t}),c.$watch("$select.selected",function(e){o.$viewValue!==e&&o.$setViewValue(e)}),o.$render=function(){r.selected=o.$viewValue},c.$on("uis:select",function(t,i){r.selected=i;var n={};n[r.parserResult.itemName]=i,s(function(){r.onSelectCallback(c,{$item:i,$model:e(i)?i:r.parserResult.modelMapper(c,n)})})}),c.$on("uis:close",function(e,t){s(function(){r.focusser.prop("disabled",!1),t||r.focusser[0].focus()},0,!1)}),c.$on("uis:activate",function(){u.prop("disabled",!0)});var u=angular.element("<input ng-disabled='$select.disabled' class='ui-select-focusser ui-select-offscreen' type='text' id='{{ $select.focusserId }}' aria-label='{{ $select.focusserTitle }}' aria-haspopup='true' role='button' />");i(u)(c),r.focusser=u,r.focusInput=u,n.parent().append(u),u.bind("focus",function(){c.$evalAsync(function(){r.focus=!0})}),u.bind("blur",function(){c.$evalAsync(function(){r.focus=!1})}),u.bind("keydown",function(e){return e.which===t.BACKSPACE&&r.backspaceReset!==!1?(e.preventDefault(),e.stopPropagation(),r.select(void 0),void c.$apply()):void(e.which===t.TAB||t.isControl(e)||t.isFunctionKey(e)||e.which===t.ESC||(e.which!=t.DOWN&&e.which!=t.UP&&e.which!=t.ENTER&&e.which!=t.SPACE||(e.preventDefault(),e.stopPropagation(),r.activate()),c.$digest()))}),u.bind("keyup input",function(e){e.which===t.TAB||t.isControl(e)||t.isFunctionKey(e)||e.which===t.ESC||e.which==t.ENTER||e.which===t.BACKSPACE||(r.activate(u.val()),u.val(""),c.$digest())})}}}]),i.directive("uiSelectSort",["$timeout","uiSelectConfig","uiSelectMinErr",function(e,t,s){return{require:["^^uiSelect","^ngModel"],link:function(t,i,c,n){if(null===t[c.uiSelectSort])throw s("sort","Expected a list to sort");var l=n[0],a=n[1],r=angular.extend({axis:"horizontal"},t.$eval(c.uiSelectSortOptions)),o=r.axis,u="dragging",d="dropping",p="dropping-before",h="dropping-after";t.$watch(function(){return l.sortable},function(e){e?i.attr("draggable",!0):i.removeAttr("draggable")}),i.on("dragstart",function(e){i.addClass(u),(e.dataTransfer||e.originalEvent.dataTransfer).setData("text",t.$index.toString())}),i.on("dragend",function(){v(u)});var g,f=function(e,t){this.splice(t,0,this.splice(e,1)[0])},v=function(e){angular.forEach(l.$element.querySelectorAll("."+e),function(t){angular.element(t).removeClass(e)})},m=function(e){e.preventDefault();var t="vertical"===o?e.offsetY||e.layerY||(e.originalEvent?e.originalEvent.offsetY:0):e.offsetX||e.layerX||(e.originalEvent?e.originalEvent.offsetX:0);t<this["vertical"===o?"offsetHeight":"offsetWidth"]/2?(v(h),i.addClass(p)):(v(p),i.addClass(h))},$=function(t){t.preventDefault();var s=parseInt((t.dataTransfer||t.originalEvent.dataTransfer).getData("text"),10);e.cancel(g),g=e(function(){b(s)},20)},b=function(e){var s=t.$eval(c.uiSelectSort),n=s[e],l=null;l=i.hasClass(p)?e<t.$index?t.$index-1:t.$index:e<t.$index?t.$index:t.$index+1,f.apply(s,[e,l]),a.$setViewValue(Date.now()),t.$apply(function(){t.$emit("uiSelectSort:change",{array:s,item:n,from:e,to:l})}),v(d),v(p),v(h),i.off("drop",$)};i.on("dragenter",function(){i.hasClass(u)||(i.addClass(d),i.on("dragover",m),i.on("drop",$))}),i.on("dragleave",function(e){e.target==i&&(v(d),v(p),v(h),i.off("dragover",m),i.off("drop",$))})}}}]),i.factory("$$uisDebounce",["$timeout",function(e){return function(t,s){var i;return function(){var c=this,n=Array.prototype.slice.call(arguments);i&&e.cancel(i),i=e(function(){t.apply(c,n)},s)}}}]),i.directive("uisOpenClose",["$parse","$timeout",function(e,t){return{restrict:"A",require:"uiSelect",link:function(s,i,c,n){n.onOpenCloseCallback=e(c.uisOpenClose),s.$watch("$select.open",function(e,i){e!==i&&t(function(){n.onOpenCloseCallback(s,{isOpen:e});
// })})}}}]),i.service("uisRepeatParser",["uiSelectMinErr","$parse",function(e,t){var s=this;s.parse=function(s){var i;if(i=s.match(/^\s*(?:([\s\S]+?)\s+as\s+)?(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+(\s*[\s\S]+?)?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/),!i)throw e("iexp","Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",s);var c=i[5],n="";if(i[3]){c=i[5].replace(/(^\()|(\)$)/g,"");var l=i[5].match(/^\s*(?:[\s\S]+?)(?:[^\|]|\|\|)+([\s\S]*)\s*$/);l&&l[1].trim()&&(n=l[1],c=c.replace(n,""))}return{itemName:i[4]||i[2],keyName:i[3],source:t(c),filters:n,trackByExp:i[6],modelMapper:t(i[1]||i[4]||i[2]),repeatExpression:function(e){var t=this.itemName+" in "+(e?"$group.items":"$select.items");return this.trackByExp&&(t+=" track by "+this.trackByExp),t}}},s.getGroupNgRepeatExpression=function(){return"$group in $select.groups track by $group.name"}}])}(),angular.module("ui.select").run(["$templateCache",function(e){e.put("bootstrap/choices.tpl.html",'<ul class="ui-select-choices ui-select-choices-content ui-select-dropdown dropdown-menu" ng-show="$select.open && $select.items.length > 0"><li class="ui-select-choices-group" id="ui-select-choices-{{ $select.generatedId }}"><div class="divider" ng-show="$select.isGrouped && $index > 0"></div><div ng-show="$select.isGrouped" class="ui-select-choices-group-label dropdown-header" ng-bind="$group.name"></div><div ng-attr-id="ui-select-choices-row-{{ $select.generatedId }}-{{$index}}" class="ui-select-choices-row" ng-class="{active: $select.isActive(this), disabled: $select.isDisabled(this)}" role="option"><span class="ui-select-choices-row-inner"></span></div></li></ul>'),e.put("bootstrap/match-multiple.tpl.html",'<span class="ui-select-match"><span ng-repeat="$item in $select.selected track by $index"><span class="ui-select-match-item btn btn-default btn-xs" tabindex="-1" type="button" ng-disabled="$select.disabled" ng-click="$selectMultiple.activeMatchIndex = $index;" ng-class="{\'btn-primary\':$selectMultiple.activeMatchIndex === $index, \'select-locked\':$select.isLocked(this, $index)}" ui-select-sort="$select.selected"><span class="close ui-select-match-close" ng-hide="$select.disabled" ng-click="$selectMultiple.removeChoice($index)">&nbsp;&times;</span> <span uis-transclude-append=""></span></span></span></span>'),e.put("bootstrap/match.tpl.html",'<div class="ui-select-match" ng-hide="$select.open && $select.searchEnabled" ng-disabled="$select.disabled" ng-class="{\'btn-default-focus\':$select.focus}"><span tabindex="-1" class="btn btn-default form-control  form-control-lg ui-select-toggle" aria-label="{{ $select.baseTitle }} activate" ng-disabled="$select.disabled" ng-click="$select.activate()" style="outline: 0;"><span ng-show="$select.isEmpty()" class="ui-select-placeholder text-muted">{{$select.placeholder}}</span> <span ng-hide="$select.isEmpty()" class="ui-select-match-text pull-left" ng-class="{\'ui-select-allow-clear\': $select.allowClear && !$select.isEmpty()}" ng-transclude=""></span> <i class="caret pull-right" ng-click="$select.toggle($event)"></i> <a ng-show="$select.allowClear && !$select.isEmpty() && ($select.disabled !== true)" aria-label="{{ $select.baseTitle }} clear" style="margin-right: 10px" ng-click="$select.clear($event)" class="btn btn-xs btn-link pull-right"><i class="glyphicon glyphicon-remove" aria-hidden="true"></i></a></span></div>'),e.put("bootstrap/no-choice.tpl.html",'<ul class="ui-select-no-choice dropdown-menu" ng-show="$select.items.length == 0"><li ng-transclude=""></li></ul>'),e.put("bootstrap/select-multiple.tpl.html",'<div class="ui-select-container ui-select-multiple ui-select-bootstrap dropdown form-control" ng-class="{open: $select.open}"><div><div class="ui-select-match"></div><input type="search" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" class="ui-select-search input-xs" placeholder="{{$selectMultiple.getPlaceholder()}}" ng-disabled="$select.disabled" ng-click="$select.activate()" ng-model="$select.search" role="combobox" aria-expanded="{{$select.open}}" aria-label="{{$select.baseTitle}}" ng-class="{\'spinner\': $select.refreshing}" ondrop="return false;"></div><div class="ui-select-choices"></div><div class="ui-select-no-choice"></div></div>'),e.put("bootstrap/select.tpl.html",'<div class="ui-select-container ui-select-bootstrap dropdown" ng-class="{open: $select.open}"><div class="ui-select-match"></div><span ng-show="$select.open && $select.refreshing && $select.spinnerEnabled" class="ui-select-refreshing {{$select.spinnerClass}}"></span> <input type="search" autocomplete="off" tabindex="-1" aria-expanded="true" aria-label="{{ $select.baseTitle }}" aria-owns="ui-select-choices-{{ $select.generatedId }}" class="form-control ui-select-search" ng-class="{ \'ui-select-search-hidden\' : !$select.searchEnabled }" placeholder="{{$select.placeholder}}" ng-model="$select.search" ng-show="$select.open"><div class="ui-select-choices"></div><div class="ui-select-no-choice"></div></div>'),e.put("select2/choices.tpl.html",'<ul tabindex="-1" class="ui-select-choices ui-select-choices-content select2-results"><li class="ui-select-choices-group" ng-class="{\'select2-result-with-children\': $select.choiceGrouped($group) }"><div ng-show="$select.choiceGrouped($group)" class="ui-select-choices-group-label select2-result-label" ng-bind="$group.name"></div><ul id="ui-select-choices-{{ $select.generatedId }}" ng-class="{\'select2-result-sub\': $select.choiceGrouped($group), \'select2-result-single\': !$select.choiceGrouped($group) }"><li role="option" ng-attr-id="ui-select-choices-row-{{ $select.generatedId }}-{{$index}}" class="ui-select-choices-row" ng-class="{\'select2-highlighted\': $select.isActive(this), \'select2-disabled\': $select.isDisabled(this)}"><div class="select2-result-label ui-select-choices-row-inner"></div></li></ul></li></ul>'),e.put("select2/match-multiple.tpl.html",'<span class="ui-select-match"><li class="ui-select-match-item select2-search-choice" ng-repeat="$item in $select.selected track by $index" ng-class="{\'select2-search-choice-focus\':$selectMultiple.activeMatchIndex === $index, \'select2-locked\':$select.isLocked(this, $index)}" ui-select-sort="$select.selected"><span uis-transclude-append=""></span> <a href="javascript:;" class="ui-select-match-close select2-search-choice-close" ng-click="$selectMultiple.removeChoice($index)" tabindex="-1"></a></li></span>'),e.put("select2/match.tpl.html",'<a class="select2-choice ui-select-match" ng-class="{\'select2-default\': $select.isEmpty()}" ng-click="$select.toggle($event)" aria-label="{{ $select.baseTitle }} select"><span ng-show="$select.isEmpty()" class="select2-chosen">{{$select.placeholder}}</span> <span ng-hide="$select.isEmpty()" class="select2-chosen" ng-transclude=""></span> <abbr ng-if="$select.allowClear && !$select.isEmpty()" class="select2-search-choice-close" ng-click="$select.clear($event)"></abbr> <span class="select2-arrow ui-select-toggle"><b></b></span></a>'),e.put("select2/no-choice.tpl.html",'<div class="ui-select-no-choice dropdown" ng-show="$select.items.length == 0"><div class="dropdown-content"><div data-selectable="" ng-transclude=""></div></div></div>'),e.put("select2/select-multiple.tpl.html",'<div class="ui-select-container ui-select-multiple select2 select2-container select2-container-multi" ng-class="{\'select2-container-active select2-dropdown-open open\': $select.open, \'select2-container-disabled\': $select.disabled}"><ul class="select2-choices"><span class="ui-select-match"></span><li class="select2-search-field"><input type="search" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" role="combobox" aria-expanded="true" aria-owns="ui-select-choices-{{ $select.generatedId }}" aria-label="{{ $select.baseTitle }}" aria-activedescendant="ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}" class="select2-input ui-select-search" placeholder="{{$selectMultiple.getPlaceholder()}}" ng-disabled="$select.disabled" ng-hide="$select.disabled" ng-model="$select.search" ng-click="$select.activate()" style="width: 34px;" ondrop="return false;"></li></ul><div class="ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active" ng-class="{\'select2-display-none\': !$select.open || $select.items.length === 0}"><div class="ui-select-choices"></div></div></div>'),e.put("select2/select.tpl.html",'<div class="ui-select-container select2 select2-container" ng-class="{\'select2-container-active select2-dropdown-open open\': $select.open, \'select2-container-disabled\': $select.disabled, \'select2-container-active\': $select.focus, \'select2-allowclear\': $select.allowClear && !$select.isEmpty()}"><div class="ui-select-match"></div><div class="ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active" ng-class="{\'select2-display-none\': !$select.open}"><div class="search-container" ng-class="{\'ui-select-search-hidden\':!$select.searchEnabled, \'select2-search\':$select.searchEnabled}"><input type="search" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" ng-class="{\'select2-active\': $select.refreshing}" role="combobox" aria-expanded="true" aria-owns="ui-select-choices-{{ $select.generatedId }}" aria-label="{{ $select.baseTitle }}" class="ui-select-search select2-input" ng-model="$select.search"></div><div class="ui-select-choices"></div><div class="ui-select-no-choice"></div></div></div>'),e.put("selectize/choices.tpl.html",'<div ng-show="$select.open" class="ui-select-choices ui-select-dropdown selectize-dropdown" ng-class="{\'single\': !$select.multiple, \'multi\': $select.multiple}"><div class="ui-select-choices-content selectize-dropdown-content"><div class="ui-select-choices-group optgroup"><div ng-show="$select.isGrouped" class="ui-select-choices-group-label optgroup-header" ng-bind="$group.name"></div><div role="option" class="ui-select-choices-row" ng-class="{active: $select.isActive(this), disabled: $select.isDisabled(this)}"><div class="option ui-select-choices-row-inner" data-selectable=""></div></div></div></div></div>'),e.put("selectize/match-multiple.tpl.html",'<div class="ui-select-match" data-value="" ng-repeat="$item in $select.selected track by $index" ng-click="$selectMultiple.activeMatchIndex = $index;" ng-class="{\'active\':$selectMultiple.activeMatchIndex === $index}" ui-select-sort="$select.selected"><span class="ui-select-match-item" ng-class="{\'select-locked\':$select.isLocked(this, $index)}"><span uis-transclude-append=""></span> <span class="remove ui-select-match-close" ng-hide="$select.disabled" ng-click="$selectMultiple.removeChoice($index)">&times;</span></span></div>'),e.put("selectize/match.tpl.html",'<div ng-hide="$select.searchEnabled && ($select.open || $select.isEmpty())" class="ui-select-match"><span ng-show="!$select.searchEnabled && ($select.isEmpty() || $select.open)" class="ui-select-placeholder text-muted">{{$select.placeholder}}</span> <span ng-hide="$select.isEmpty() || $select.open" ng-transclude=""></span></div>'),e.put("selectize/no-choice.tpl.html",'<div class="ui-select-no-choice selectize-dropdown" ng-show="$select.items.length == 0"><div class="selectize-dropdown-content"><div data-selectable="" ng-transclude=""></div></div></div>'),e.put("selectize/select-multiple.tpl.html",'<div class="ui-select-container selectize-control multi plugin-remove_button" ng-class="{\'open\': $select.open}"><div class="selectize-input" ng-class="{\'focus\': $select.open, \'disabled\': $select.disabled, \'selectize-focus\' : $select.focus}" ng-click="$select.open && !$select.searchEnabled ? $select.toggle($event) : $select.activate()"><div class="ui-select-match"></div><input type="search" autocomplete="off" tabindex="-1" class="ui-select-search" ng-class="{\'ui-select-search-hidden\':!$select.searchEnabled}" placeholder="{{$selectMultiple.getPlaceholder()}}" ng-model="$select.search" ng-disabled="$select.disabled" aria-expanded="{{$select.open}}" aria-label="{{ $select.baseTitle }}" ondrop="return false;"></div><div class="ui-select-choices"></div><div class="ui-select-no-choice"></div></div>'),e.put("selectize/select.tpl.html",'<div class="ui-select-container selectize-control single" ng-class="{\'open\': $select.open}"><div class="selectize-input" ng-class="{\'focus\': $select.open, \'disabled\': $select.disabled, \'selectize-focus\' : $select.focus}" ng-click="$select.open && !$select.searchEnabled ? $select.toggle($event) : $select.activate()"><div class="ui-select-match"></div><input type="search" autocomplete="off" tabindex="-1" class="ui-select-search ui-select-toggle" ng-class="{\'ui-select-search-hidden\':!$select.searchEnabled}" ng-click="$select.toggle($event)" placeholder="{{$select.placeholder}}" ng-model="$select.search" ng-hide="!$select.isEmpty() && !$select.open" ng-disabled="$select.disabled" aria-label="{{ $select.baseTitle }}"></div><div class="ui-select-choices"></div><div class="ui-select-no-choice"></div></div>')}]);
// //# sourceMappingURL=select.min.js.map
/*!
 * ui-select
 * http://github.com/angular-ui/ui-select
 * Version: 0.19.8 - 2017-04-18T05:43:43.673Z
 * License: MIT
 */


(function () {
  "use strict";
  var KEY = {
    TAB: 9,
    ENTER: 13,
    ESC: 27,
    SPACE: 32,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    PAGE_UP: 33,
    PAGE_DOWN: 34,
    HOME: 36,
    END: 35,
    BACKSPACE: 8,
    DELETE: 46,
    COMMAND: 91,

    MAP: { 91 : "COMMAND", 8 : "BACKSPACE" , 9 : "TAB" , 13 : "ENTER" , 16 : "SHIFT" , 17 : "CTRL" , 18 : "ALT" , 19 : "PAUSEBREAK" , 20 : "CAPSLOCK" , 27 : "ESC" , 32 : "SPACE" , 33 : "PAGE_UP", 34 : "PAGE_DOWN" , 35 : "END" , 36 : "HOME" , 37 : "LEFT" , 38 : "UP" , 39 : "RIGHT" , 40 : "DOWN" , 43 : "+" , 44 : "PRINTSCREEN" , 45 : "INSERT" , 46 : "DELETE", 48 : "0" , 49 : "1" , 50 : "2" , 51 : "3" , 52 : "4" , 53 : "5" , 54 : "6" , 55 : "7" , 56 : "8" , 57 : "9" , 59 : ";", 61 : "=" , 65 : "A" , 66 : "B" , 67 : "C" , 68 : "D" , 69 : "E" , 70 : "F" , 71 : "G" , 72 : "H" , 73 : "I" , 74 : "J" , 75 : "K" , 76 : "L", 77 : "M" , 78 : "N" , 79 : "O" , 80 : "P" , 81 : "Q" , 82 : "R" , 83 : "S" , 84 : "T" , 85 : "U" , 86 : "V" , 87 : "W" , 88 : "X" , 89 : "Y" , 90 : "Z", 96 : "0" , 97 : "1" , 98 : "2" , 99 : "3" , 100 : "4" , 101 : "5" , 102 : "6" , 103 : "7" , 104 : "8" , 105 : "9", 106 : "*" , 107 : "+" , 109 : "-" , 110 : "." , 111 : "/", 112 : "F1" , 113 : "F2" , 114 : "F3" , 115 : "F4" , 116 : "F5" , 117 : "F6" , 118 : "F7" , 119 : "F8" , 120 : "F9" , 121 : "F10" , 122 : "F11" , 123 : "F12", 144 : "NUMLOCK" , 145 : "SCROLLLOCK" , 186 : ";" , 187 : "=" , 188 : "," , 189 : "-" , 190 : "." , 191 : "/" , 192 : "`" , 219 : "[" , 220 : "\\" , 221 : "]" , 222 : "'"
    },

    isControl: function (e) {
      var k = e.which;
      switch (k) {
        case KEY.COMMAND:
        case KEY.SHIFT:
        case KEY.CTRL:
        case KEY.ALT:
          return true;
      }

      if (e.metaKey || e.ctrlKey || e.altKey) return true;

      return false;
    },
    isFunctionKey: function (k) {
      k = k.which ? k.which : k;
      return k >= 112 && k <= 123;
    },
    isVerticalMovement: function (k){
      return ~[KEY.UP, KEY.DOWN].indexOf(k);
    },
    isHorizontalMovement: function (k){
      return ~[KEY.LEFT,KEY.RIGHT,KEY.BACKSPACE,KEY.DELETE].indexOf(k);
    },
    toSeparator: function (k) {
      var sep = {ENTER:"\n",TAB:"\t",SPACE:" "}[k];
      if (sep) return sep;
      // return undefined for special keys other than enter, tab or space.
      // no way to use them to cut strings.
      return KEY[k] ? undefined : k;
    }
  };

  function isNil(value) {
    return angular.isUndefined(value) || value === null;
  }

  /**
   * Add querySelectorAll() to jqLite.
   *
   * jqLite find() is limited to lookups by tag name.
   * TODO This will change with future versions of AngularJS, to be removed when this happens
   *
   * See jqLite.find - why not use querySelectorAll? https://github.com/angular/angular.js/issues/3586
   * See feat(jqLite): use querySelectorAll instead of getElementsByTagName in jqLite.find https://github.com/angular/angular.js/pull/3598
   */
  if (angular.element.prototype.querySelectorAll === undefined) {
    angular.element.prototype.querySelectorAll = function(selector) {
      return angular.element(this[0].querySelectorAll(selector));
    };
  }

  /**
   * Add closest() to jqLite.
   */
  if (angular.element.prototype.closest === undefined) {
    angular.element.prototype.closest = function( selector) {
      var elem = this[0];
      var matchesSelector = elem.matches || elem.webkitMatchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector;

      while (elem) {
        if (matchesSelector.bind(elem)(selector)) {
          return elem;
        } else {
          elem = elem.parentElement;
        }
      }
      return false;
    };
  }

  var latestId = 0;

  var uis = angular.module('ui.select', [])

    .constant('uiSelectConfig', {
      theme: 'bootstrap',
      searchEnabled: true,
      sortable: false,
      placeholder: '', // Empty by default, like HTML tag <select>
      refreshDelay: 1000, // In milliseconds
      closeOnSelect: true,
      skipFocusser: false,
      dropdownPosition: 'auto',
      removeSelected: true,
      resetSearchInput: true,
      generateId: function() {
        return latestId++;
      },
      appendToBody: false,
      spinnerEnabled: false,
      spinnerClass: 'glyphicon glyphicon-refresh ui-select-spin',
      backspaceReset: true
    })

    // See Rename minErr and make it accessible from outside https://github.com/angular/angular.js/issues/6913
    .service('uiSelectMinErr', function() {
      var minErr = angular.$$minErr('ui.select');
      return function() {
        var error = minErr.apply(this, arguments);
        var message = error.message.replace(new RegExp('\nhttp://errors.angularjs.org/.*'), '');
        return new Error(message);
      };
    })

    // Recreates old behavior of ng-transclude. Used internally.
    .directive('uisTranscludeAppend', function () {
      return {
        link: function (scope, element, attrs, ctrl, transclude) {
          transclude(scope, function (clone) {
            element.append(clone);
          });
        }
      };
    })

    /**
     * Highlights text that matches $select.search.
     *
     * Taken from AngularUI Bootstrap Typeahead
     * See https://github.com/angular-ui/bootstrap/blob/0.10.0/src/typeahead/typeahead.js#L340
     */
    .filter('highlight', function() {
      function escapeRegexp(queryToEscape) {
        return ('' + queryToEscape).replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
      }

      return function(matchItem, query) {
        return query && matchItem ? ('' + matchItem).replace(new RegExp(escapeRegexp(query), 'gi'), '<span class="ui-select-highlight">$&</span>') : matchItem;
      };
    })

    /**
     * A read-only equivalent of jQuery's offset function: http://api.jquery.com/offset/
     *
     * Taken from AngularUI Bootstrap Position:
     * See https://github.com/angular-ui/bootstrap/blob/master/src/position/position.js#L70
     */
    .factory('uisOffset',
      ['$document', '$window',
        function ($document, $window) {

          return function(element) {
            var boundingClientRect = element[0].getBoundingClientRect();
            return {
              width: boundingClientRect.width || element.prop('offsetWidth'),
              height: boundingClientRect.height || element.prop('offsetHeight'),
              top: boundingClientRect.top + ($window.pageYOffset || $document[0].documentElement.scrollTop),
              left: boundingClientRect.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)
            };
          };
        }]);

  uis.directive('uiSelectChoices',
    ['uiSelectConfig', 'uisRepeatParser', 'uiSelectMinErr', '$compile', '$window',
      function(uiSelectConfig, RepeatParser, uiSelectMinErr, $compile, $window) {

        return {
          restrict: 'EA',
          require: '^uiSelect',
          replace: true,
          transclude: true,
          templateUrl: function(tElement) {
            // Needed so the uiSelect can detect the transcluded content
            tElement.addClass('ui-select-choices');

            // Gets theme attribute from parent (ui-select)
            var theme = tElement.parent().attr('theme') || uiSelectConfig.theme;
            return theme + '/choices.tpl.html';
          },

          compile: function(tElement, tAttrs) {

            if (!tAttrs.repeat) throw uiSelectMinErr('repeat', "Expected 'repeat' expression.");

            // var repeat = RepeatParser.parse(attrs.repeat);
            var groupByExp = tAttrs.groupBy;
            var groupFilterExp = tAttrs.groupFilter;

            if (groupByExp) {
              var groups = tElement.querySelectorAll('.ui-select-choices-group');
              if (groups.length !== 1) throw uiSelectMinErr('rows', "Expected 1 .ui-select-choices-group but got '{0}'.", groups.length);
              groups.attr('ng-repeat', RepeatParser.getGroupNgRepeatExpression());
            }

            var parserResult = RepeatParser.parse(tAttrs.repeat);

            var choices = tElement.querySelectorAll('.ui-select-choices-row');
            if (choices.length !== 1) {
              throw uiSelectMinErr('rows', "Expected 1 .ui-select-choices-row but got '{0}'.", choices.length);
            }

            choices.attr('ng-repeat', parserResult.repeatExpression(groupByExp))
              .attr('ng-if', '$select.open'); //Prevent unnecessary watches when dropdown is closed


            var rowsInner = tElement.querySelectorAll('.ui-select-choices-row-inner');
            if (rowsInner.length !== 1) {
              throw uiSelectMinErr('rows', "Expected 1 .ui-select-choices-row-inner but got '{0}'.", rowsInner.length);
            }
            rowsInner.attr('uis-transclude-append', ''); //Adding uisTranscludeAppend directive to row element after choices element has ngRepeat

            // If IE8 then need to target rowsInner to apply the ng-click attr as choices will not capture the event.
            var clickTarget = $window.document.addEventListener ? choices : rowsInner;
            clickTarget.attr('ng-click', '$select.select(' + parserResult.itemName + ',$select.skipFocusser,$event)');

            return function link(scope, element, attrs, $select) {


              $select.parseRepeatAttr(attrs.repeat, groupByExp, groupFilterExp); //Result ready at $select.parserResult
              $select.disableChoiceExpression = attrs.uiDisableChoice;
              $select.onHighlightCallback = attrs.onHighlight;
              $select.minimumInputLength = parseInt(attrs.minimumInputLength) || 0;
              $select.dropdownPosition = attrs.position ? attrs.position.toLowerCase() : uiSelectConfig.dropdownPosition;

              scope.$watch('$select.search', function(newValue) {
                if(newValue && !$select.open && $select.multiple) $select.activate(false, true);
                $select.activeIndex = $select.tagging.isActivated ? -1 : 0;
                if (!attrs.minimumInputLength || $select.search.length >= attrs.minimumInputLength) {
                  $select.refresh(attrs.refresh);
                } else {
                  $select.items = [];
                }
              });

              attrs.$observe('refreshDelay', function() {
                // $eval() is needed otherwise we get a string instead of a number
                var refreshDelay = scope.$eval(attrs.refreshDelay);
                $select.refreshDelay = refreshDelay !== undefined ? refreshDelay : uiSelectConfig.refreshDelay;
              });

              scope.$watch('$select.open', function(open) {
                if (open) {
                  tElement.attr('role', 'listbox');
                  $select.refresh(attrs.refresh);
                } else {
                  element.removeAttr('role');
                }
              });
            };
          }
        };
      }]);

  /**
   * Contains ui-select "intelligence".
   *
   * The goal is to limit dependency on the DOM whenever possible and
   * put as much logic in the controller (instead of the link functions) as possible so it can be easily tested.
   */
  uis.controller('uiSelectCtrl',
    ['$scope', '$element', '$timeout', '$filter', '$$uisDebounce', 'uisRepeatParser', 'uiSelectMinErr', 'uiSelectConfig', '$parse', '$injector', '$window',
      function($scope, $element, $timeout, $filter, $$uisDebounce, RepeatParser, uiSelectMinErr, uiSelectConfig, $parse, $injector, $window) {

        var ctrl = this;

        var EMPTY_SEARCH = '';

        ctrl.placeholder = uiSelectConfig.placeholder;
        ctrl.searchEnabled = uiSelectConfig.searchEnabled;
        ctrl.sortable = uiSelectConfig.sortable;
        ctrl.refreshDelay = uiSelectConfig.refreshDelay;
        ctrl.paste = uiSelectConfig.paste;
        ctrl.resetSearchInput = uiSelectConfig.resetSearchInput;
        ctrl.refreshing = false;
        ctrl.spinnerEnabled = uiSelectConfig.spinnerEnabled;
        ctrl.spinnerClass = uiSelectConfig.spinnerClass;
        ctrl.removeSelected = uiSelectConfig.removeSelected; //If selected item(s) should be removed from dropdown list
        ctrl.closeOnSelect = true; //Initialized inside uiSelect directive link function
        ctrl.skipFocusser = false; //Set to true to avoid returning focus to ctrl when item is selected
        ctrl.search = EMPTY_SEARCH;

        ctrl.activeIndex = 0; //Dropdown of choices
        ctrl.items = []; //All available choices

        ctrl.open = false;
        ctrl.focus = false;
        ctrl.disabled = false;
        ctrl.selected = undefined;

        ctrl.dropdownPosition = 'auto';

        ctrl.focusser = undefined; //Reference to input element used to handle focus events
        ctrl.multiple = undefined; // Initialized inside uiSelect directive link function
        ctrl.disableChoiceExpression = undefined; // Initialized inside uiSelectChoices directive link function
        ctrl.tagging = {isActivated: false, fct: undefined};
        ctrl.taggingTokens = {isActivated: false, tokens: undefined};
        ctrl.lockChoiceExpression = undefined; // Initialized inside uiSelectMatch directive link function
        ctrl.clickTriggeredSelect = false;
        ctrl.$filter = $filter;
        ctrl.$element = $element;

        // Use $injector to check for $animate and store a reference to it
        ctrl.$animate = (function () {
          try {
            return $injector.get('$animate');
          } catch (err) {
            // $animate does not exist
            return null;
          }
        })();

        ctrl.searchInput = $element.querySelectorAll('input.ui-select-search');
        if (ctrl.searchInput.length !== 1) {
          throw uiSelectMinErr('searchInput', "Expected 1 input.ui-select-search but got '{0}'.", ctrl.searchInput.length);
        }

        ctrl.isEmpty = function() {
          return isNil(ctrl.selected) || ctrl.selected === '' || (ctrl.multiple && ctrl.selected.length === 0);
        };

        function _findIndex(collection, predicate, thisArg){
          if (collection.findIndex){
            return collection.findIndex(predicate, thisArg);
          } else {
            var list = Object(collection);
            var length = list.length >>> 0;
            var value;

            for (var i = 0; i < length; i++) {
              value = list[i];
              if (predicate.call(thisArg, value, i, list)) {
                return i;
              }
            }
            return -1;
          }
        }

        // Most of the time the user does not want to empty the search input when in typeahead mode
        function _resetSearchInput() {
          if (ctrl.resetSearchInput) {
            ctrl.search = EMPTY_SEARCH;
            //reset activeIndex
            if (ctrl.selected && ctrl.items.length && !ctrl.multiple) {
              ctrl.activeIndex = _findIndex(ctrl.items, function(item){
                return angular.equals(this, item);
              }, ctrl.selected);
            }
          }
        }

        function _groupsFilter(groups, groupNames) {
          var i, j, result = [];
          for(i = 0; i < groupNames.length ;i++){
            for(j = 0; j < groups.length ;j++){
              if(groups[j].name == [groupNames[i]]){
                result.push(groups[j]);
              }
            }
          }
          return result;
        }

        // When the user clicks on ui-select, displays the dropdown list
        ctrl.activate = function(initSearchValue, avoidReset) {
          if (!ctrl.disabled  && !ctrl.open) {
            if(!avoidReset) _resetSearchInput();

            $scope.$broadcast('uis:activate');
            ctrl.open = true;
            ctrl.activeIndex = ctrl.activeIndex >= ctrl.items.length ? 0 : ctrl.activeIndex;
            // ensure that the index is set to zero for tagging variants
            // that where first option is auto-selected
            if ( ctrl.activeIndex === -1 && ctrl.taggingLabel !== false ) {
              ctrl.activeIndex = 0;
            }

            var container = $element.querySelectorAll('.ui-select-choices-content');
            var searchInput = $element.querySelectorAll('.ui-select-search');
            if (ctrl.$animate && ctrl.$animate.on && ctrl.$animate.enabled(container[0])) {
              var animateHandler = function(elem, phase) {
                if (phase === 'start' && ctrl.items.length === 0) {
                  // Only focus input after the animation has finished
                  ctrl.$animate.off('removeClass', searchInput[0], animateHandler);
                  $timeout(function () {
                    ctrl.focusSearchInput(initSearchValue);
                  });
                } else if (phase === 'close') {
                  // Only focus input after the animation has finished
                  ctrl.$animate.off('enter', container[0], animateHandler);
                  $timeout(function () {
                    ctrl.focusSearchInput(initSearchValue);
                  });
                }
              };

              if (ctrl.items.length > 0) {
                ctrl.$animate.on('enter', container[0], animateHandler);
              } else {
                ctrl.$animate.on('removeClass', searchInput[0], animateHandler);
              }
            } else {
              $timeout(function () {
                ctrl.focusSearchInput(initSearchValue);
                if(!ctrl.tagging.isActivated && ctrl.items.length > 1) {
                  _ensureHighlightVisible();
                }
              });
            }
          }
          else if (ctrl.open && !ctrl.searchEnabled) {
            // Close the selection if we don't have search enabled, and we click on the select again
            ctrl.close();
          }
        };

        ctrl.focusSearchInput = function (initSearchValue) {
          ctrl.search = initSearchValue || ctrl.search;
          ctrl.searchInput[0].focus();
        };

        ctrl.findGroupByName = function(name) {
          return ctrl.groups && ctrl.groups.filter(function(group) {
            return group.name === name;
          })[0];
        };

        ctrl.parseRepeatAttr = function(repeatAttr, groupByExp, groupFilterExp) {
          function updateGroups(items) {
            var groupFn = $scope.$eval(groupByExp);
            ctrl.groups = [];
            angular.forEach(items, function(item) {
              var groupName = angular.isFunction(groupFn) ? groupFn(item) : item[groupFn];
              var group = ctrl.findGroupByName(groupName);
              if(group) {
                group.items.push(item);
              }
              else {
                ctrl.groups.push({name: groupName, items: [item]});
              }
            });
            if(groupFilterExp){
              var groupFilterFn = $scope.$eval(groupFilterExp);
              if( angular.isFunction(groupFilterFn)){
                ctrl.groups = groupFilterFn(ctrl.groups);
              } else if(angular.isArray(groupFilterFn)){
                ctrl.groups = _groupsFilter(ctrl.groups, groupFilterFn);
              }
            }
            ctrl.items = [];
            ctrl.groups.forEach(function(group) {
              ctrl.items = ctrl.items.concat(group.items);
            });
          }

          function setPlainItems(items) {
            ctrl.items = items || [];
          }

          ctrl.setItemsFn = groupByExp ? updateGroups : setPlainItems;

          ctrl.parserResult = RepeatParser.parse(repeatAttr);

          ctrl.isGrouped = !!groupByExp;
          ctrl.itemProperty = ctrl.parserResult.itemName;

          //If collection is an Object, convert it to Array

          var originalSource = ctrl.parserResult.source;

          //When an object is used as source, we better create an array and use it as 'source'
          var createArrayFromObject = function(){
            var origSrc = originalSource($scope);
            $scope.$uisSource = Object.keys(origSrc).map(function(v){
              var result = {};
              result[ctrl.parserResult.keyName] = v;
              result.value = origSrc[v];
              return result;
            });
          };

          if (ctrl.parserResult.keyName){ // Check for (key,value) syntax
            createArrayFromObject();
            ctrl.parserResult.source = $parse('$uisSource' + ctrl.parserResult.filters);
            $scope.$watch(originalSource, function(newVal, oldVal){
              if (newVal !== oldVal) createArrayFromObject();
            }, true);
          }

          ctrl.refreshItems = function (data){
            data = data || ctrl.parserResult.source($scope);
            var selectedItems = ctrl.selected;
            //TODO should implement for single mode removeSelected
            if (ctrl.isEmpty() || (angular.isArray(selectedItems) && !selectedItems.length) || !ctrl.multiple || !ctrl.removeSelected) {
              ctrl.setItemsFn(data);
            }else{
              if ( data !== undefined && data !== null ) {
                var filteredItems = data.filter(function(i) {
                  return angular.isArray(selectedItems) ? selectedItems.every(function(selectedItem) {
                    return !angular.equals(i, selectedItem);
                  }) : !angular.equals(i, selectedItems);
                });
                ctrl.setItemsFn(filteredItems);
              }
            }
            if (ctrl.dropdownPosition === 'auto' || ctrl.dropdownPosition === 'up'){
              $scope.calculateDropdownPos();
            }
            $scope.$broadcast('uis:refresh');
          };

          // See https://github.com/angular/angular.js/blob/v1.2.15/src/ng/directive/ngRepeat.js#L259
          $scope.$watchCollection(ctrl.parserResult.source, function(items) {
            if (items === undefined || items === null) {
              // If the user specifies undefined or null => reset the collection
              // Special case: items can be undefined if the user did not initialized the collection on the scope
              // i.e $scope.addresses = [] is missing
              ctrl.items = [];
            } else {
              if (!angular.isArray(items)) {
                throw uiSelectMinErr('items', "Expected an array but got '{0}'.", items);
              } else {
                //Remove already selected items (ex: while searching)
                //TODO Should add a test
                ctrl.refreshItems(items);

                //update the view value with fresh data from items, if there is a valid model value
                if(angular.isDefined(ctrl.ngModel.$modelValue)) {
                  ctrl.ngModel.$modelValue = null; //Force scope model value and ngModel value to be out of sync to re-run formatters
                }
              }
            }
          });

        };

        var _refreshDelayPromise;

        /**
         * Typeahead mode: lets the user refresh the collection using his own function.
         *
         * See Expose $select.search for external / remote filtering https://github.com/angular-ui/ui-select/pull/31
         */
        ctrl.refresh = function(refreshAttr) {
          if (refreshAttr !== undefined) {
            // Debounce
            // See https://github.com/angular-ui/bootstrap/blob/0.10.0/src/typeahead/typeahead.js#L155
            // FYI AngularStrap typeahead does not have debouncing: https://github.com/mgcrea/angular-strap/blob/v2.0.0-rc.4/src/typeahead/typeahead.js#L177
            if (_refreshDelayPromise) {
              $timeout.cancel(_refreshDelayPromise);
            }
            _refreshDelayPromise = $timeout(function() {
              if ($scope.$select.search.length >= $scope.$select.minimumInputLength) {
                var refreshPromise = $scope.$eval(refreshAttr);
                if (refreshPromise && angular.isFunction(refreshPromise.then) && !ctrl.refreshing) {
                  ctrl.refreshing = true;
                  refreshPromise.finally(function() {
                    ctrl.refreshing = false;
                  });
                }
              }
            }, ctrl.refreshDelay);
          }
        };

        ctrl.isActive = function(itemScope) {
          if ( !ctrl.open ) {
            return false;
          }
          var itemIndex = ctrl.items.indexOf(itemScope[ctrl.itemProperty]);
          var isActive =  itemIndex == ctrl.activeIndex;

          if ( !isActive || itemIndex < 0 ) {
            return false;
          }

          if (isActive && !angular.isUndefined(ctrl.onHighlightCallback)) {
            itemScope.$eval(ctrl.onHighlightCallback);
          }

          return isActive;
        };

        var _isItemSelected = function (item) {
          return (ctrl.selected && angular.isArray(ctrl.selected) &&
            ctrl.selected.filter(function (selection) { return angular.equals(selection, item); }).length > 0);
        };

        var disabledItems = [];

        function _updateItemDisabled(item, isDisabled) {
          var disabledItemIndex = disabledItems.indexOf(item);
          if (isDisabled && disabledItemIndex === -1) {
            disabledItems.push(item);
          }

          if (!isDisabled && disabledItemIndex > -1) {
            disabledItems.splice(disabledItemIndex, 1);
          }
        }

        function _isItemDisabled(item) {
          return disabledItems.indexOf(item) > -1;
        }

        ctrl.isDisabled = function(itemScope) {

          if (!ctrl.open) return;

          var item = itemScope[ctrl.itemProperty];
          var itemIndex = ctrl.items.indexOf(item);
          var isDisabled = false;

          if (itemIndex >= 0 && (angular.isDefined(ctrl.disableChoiceExpression) || ctrl.multiple)) {

            if (item.isTag) return false;

            if (ctrl.multiple) {
              isDisabled = _isItemSelected(item);
            }

            if (!isDisabled && angular.isDefined(ctrl.disableChoiceExpression)) {
              isDisabled = !!(itemScope.$eval(ctrl.disableChoiceExpression));
            }

            _updateItemDisabled(item, isDisabled);
          }

          return isDisabled;
        };


        // When the user selects an item with ENTER or clicks the dropdown
        ctrl.select = function(item, skipFocusser, $event) {
          if (isNil(item) || !_isItemDisabled(item)) {

            if ( ! ctrl.items && ! ctrl.search && ! ctrl.tagging.isActivated) return;

            if (!item || !_isItemDisabled(item)) {
              // if click is made on existing item, prevent from tagging, ctrl.search does not matter
              ctrl.clickTriggeredSelect = false;
              if($event && ($event.type === 'click' || $event.type === 'touchend') && item)
                ctrl.clickTriggeredSelect = true;

              if(ctrl.tagging.isActivated && ctrl.clickTriggeredSelect === false) {
                // if taggingLabel is disabled and item is undefined we pull from ctrl.search
                if ( ctrl.taggingLabel === false ) {
                  if ( ctrl.activeIndex < 0 ) {
                    if (item === undefined) {
                      item = ctrl.tagging.fct !== undefined ? ctrl.tagging.fct(ctrl.search) : ctrl.search;
                    }
                    if (!item || angular.equals( ctrl.items[0], item ) ) {
                      return;
                    }
                  } else {
                    // keyboard nav happened first, user selected from dropdown
                    item = ctrl.items[ctrl.activeIndex];
                  }
                } else {
                  // tagging always operates at index zero, taggingLabel === false pushes
                  // the ctrl.search value without having it injected
                  if ( ctrl.activeIndex === 0 ) {
                    // ctrl.tagging pushes items to ctrl.items, so we only have empty val
                    // for `item` if it is a detected duplicate
                    if ( item === undefined ) return;

                    // create new item on the fly if we don't already have one;
                    // use tagging function if we have one
                    if ( ctrl.tagging.fct !== undefined && typeof item === 'string' ) {
                      item = ctrl.tagging.fct(item);
                      if (!item) return;
                      // if item type is 'string', apply the tagging label
                    } else if ( typeof item === 'string' ) {
                      // trim the trailing space
                      item = item.replace(ctrl.taggingLabel,'').trim();
                    }
                  }
                }
                // search ctrl.selected for dupes potentially caused by tagging and return early if found
                if (_isItemSelected(item)) {
                  ctrl.close(skipFocusser);
                  return;
                }
              }
              _resetSearchInput();
              $scope.$broadcast('uis:select', item);

              if (ctrl.closeOnSelect) {
                ctrl.close(skipFocusser);
              }
            }
          }
        };

        // Closes the dropdown
        ctrl.close = function(skipFocusser) {
          if (!ctrl.open) return;
          if (ctrl.ngModel && ctrl.ngModel.$setTouched) ctrl.ngModel.$setTouched();
          ctrl.open = false;
          _resetSearchInput();
          $scope.$broadcast('uis:close', skipFocusser);

        };

        ctrl.setFocus = function(){
          if (!ctrl.focus) ctrl.focusInput[0].focus();
        };

        ctrl.clear = function($event) {
          ctrl.select(null);
          $event.stopPropagation();
          $timeout(function() {
            ctrl.focusser[0].focus();
          }, 0, false);
        };

        // Toggle dropdown
        ctrl.toggle = function(e) {
          if (ctrl.open) {
            ctrl.close();
            e.preventDefault();
            e.stopPropagation();
          } else {
            ctrl.activate();
          }
        };

        // Set default function for locked choices - avoids unnecessary
        // logic if functionality is not being used
        ctrl.isLocked = function () {
          return false;
        };

        $scope.$watch(function () {
          return angular.isDefined(ctrl.lockChoiceExpression) && ctrl.lockChoiceExpression !== "";
        }, _initaliseLockedChoices);

        function _initaliseLockedChoices(doInitalise) {
          if(!doInitalise) return;

          var lockedItems = [];

          function _updateItemLocked(item, isLocked) {
            var lockedItemIndex = lockedItems.indexOf(item);
            if (isLocked && lockedItemIndex === -1) {
              lockedItems.push(item);
            }

            if (!isLocked && lockedItemIndex > -1) {
              lockedItems.splice(lockedItemIndex, 1);
            }
          }

          function _isItemlocked(item) {
            return lockedItems.indexOf(item) > -1;
          }

          ctrl.isLocked = function (itemScope, itemIndex) {
            var isLocked = false,
              item = ctrl.selected[itemIndex];

            if(item) {
              if (itemScope) {
                isLocked = !!(itemScope.$eval(ctrl.lockChoiceExpression));
                _updateItemLocked(item, isLocked);
              } else {
                isLocked = _isItemlocked(item);
              }
            }

            return isLocked;
          };
        }


        var sizeWatch = null;
        var updaterScheduled = false;
        ctrl.sizeSearchInput = function() {

          var input = ctrl.searchInput[0],
            container = ctrl.$element[0],
            calculateContainerWidth = function() {
              // Return the container width only if the search input is visible
              return container.clientWidth * !!input.offsetParent;
            },
            updateIfVisible = function(containerWidth) {
              if (containerWidth === 0) {
                return false;
              }
              var inputWidth = containerWidth - input.offsetLeft;
              if (inputWidth < 50) inputWidth = containerWidth;
              ctrl.searchInput.css('width', inputWidth+'px');
              return true;
            };

          ctrl.searchInput.css('width', '10px');
          $timeout(function() { //Give tags time to render correctly
            if (sizeWatch === null && !updateIfVisible(calculateContainerWidth())) {
              sizeWatch = $scope.$watch(function() {
                if (!updaterScheduled) {
                  updaterScheduled = true;
                  $scope.$$postDigest(function() {
                    updaterScheduled = false;
                    if (updateIfVisible(calculateContainerWidth())) {
                      sizeWatch();
                      sizeWatch = null;
                    }
                  });
                }
              }, angular.noop);
            }
          });
        };

        function _handleDropDownSelection(key) {
          var processed = true;
          switch (key) {
            case KEY.DOWN:
              if (!ctrl.open && ctrl.multiple) ctrl.activate(false, true); //In case its the search input in 'multiple' mode
              else if (ctrl.activeIndex < ctrl.items.length - 1) {
                var idx = ++ctrl.activeIndex;
                while(_isItemDisabled(ctrl.items[idx]) && idx < ctrl.items.length) {
                  ctrl.activeIndex = ++idx;
                }
              }
              break;
            case KEY.UP:
              var minActiveIndex = (ctrl.search.length === 0 && ctrl.tagging.isActivated) ? -1 : 0;
              if (!ctrl.open && ctrl.multiple) ctrl.activate(false, true); //In case its the search input in 'multiple' mode
              else if (ctrl.activeIndex > minActiveIndex) {
                var idxmin = --ctrl.activeIndex;
                while(_isItemDisabled(ctrl.items[idxmin]) && idxmin > minActiveIndex) {
                  ctrl.activeIndex = --idxmin;
                }
              }
              break;
            case KEY.TAB:
              if (!ctrl.multiple || ctrl.open) ctrl.select(ctrl.items[ctrl.activeIndex], true);
              break;
            case KEY.ENTER:
              if(ctrl.open && (ctrl.tagging.isActivated || ctrl.activeIndex >= 0)){
                ctrl.select(ctrl.items[ctrl.activeIndex], ctrl.skipFocusser); // Make sure at least one dropdown item is highlighted before adding if not in tagging mode
              } else {
                ctrl.activate(false, true); //In case its the search input in 'multiple' mode
              }
              break;
            case KEY.ESC:
              ctrl.close();
              break;
            default:
              processed = false;
          }
          return processed;
        }

        // Bind to keyboard shortcuts
        ctrl.searchInput.on('keydown', function(e) {

          var key = e.which;

          if (~[KEY.ENTER,KEY.ESC].indexOf(key)){
            e.preventDefault();
            e.stopPropagation();
          }

          $scope.$apply(function() {

            var tagged = false;

            if (ctrl.items.length > 0 || ctrl.tagging.isActivated) {
              if(!_handleDropDownSelection(key) && !ctrl.searchEnabled) {
                e.preventDefault();
                e.stopPropagation();
              }
              if ( ctrl.taggingTokens.isActivated ) {
                for (var i = 0; i < ctrl.taggingTokens.tokens.length; i++) {
                  if ( ctrl.taggingTokens.tokens[i] === KEY.MAP[e.keyCode] ) {
                    // make sure there is a new value to push via tagging
                    if ( ctrl.search.length > 0 ) {
                      tagged = true;
                    }
                  }
                }
                if ( tagged ) {
                  $timeout(function() {
                    ctrl.searchInput.triggerHandler('tagged');
                    var newItem = ctrl.search.replace(KEY.MAP[e.keyCode],'').trim();
                    if ( ctrl.tagging.fct ) {
                      newItem = ctrl.tagging.fct( newItem );
                    }
                    if (newItem) ctrl.select(newItem, true);
                  });
                }
              }
            }

          });

          if(KEY.isVerticalMovement(key) && ctrl.items.length > 0){
            _ensureHighlightVisible();
          }

          if (key === KEY.ENTER || key === KEY.ESC) {
            e.preventDefault();
            e.stopPropagation();
          }

        });

        ctrl.searchInput.on('paste', function (e) {
          var data;

          if (window.clipboardData && window.clipboardData.getData) { // IE
            data = window.clipboardData.getData('Text');
          } else {
            data = (e.originalEvent || e).clipboardData.getData('text/plain');
          }

          // Prepend the current input field text to the paste buffer.
          data = ctrl.search + data;

          if (data && data.length > 0) {
            // If tagging try to split by tokens and add items
            if (ctrl.taggingTokens.isActivated) {
              var items = [];
              for (var i = 0; i < ctrl.taggingTokens.tokens.length; i++) {  // split by first token that is contained in data
                var separator = KEY.toSeparator(ctrl.taggingTokens.tokens[i]) || ctrl.taggingTokens.tokens[i];
                if (data.indexOf(separator) > -1) {
                  items = data.split(separator);
                  break;  // only split by one token
                }
              }
              if (items.length === 0) {
                items = [data];
              }
              var oldsearch = ctrl.search;
              angular.forEach(items, function (item) {
                var newItem = ctrl.tagging.fct ? ctrl.tagging.fct(item) : item;
                if (newItem) {
                  ctrl.select(newItem, true);
                }
              });
              ctrl.search = oldsearch || EMPTY_SEARCH;
              e.preventDefault();
              e.stopPropagation();
            } else if (ctrl.paste) {
              ctrl.paste(data);
              ctrl.search = EMPTY_SEARCH;
              e.preventDefault();
              e.stopPropagation();
            }
          }
        });

        ctrl.searchInput.on('tagged', function() {
          $timeout(function() {
            _resetSearchInput();
          });
        });

        // See https://github.com/ivaynberg/select2/blob/3.4.6/select2.js#L1431
        function _ensureHighlightVisible() {
          var container = $element.querySelectorAll('.ui-select-choices-content');
          var choices = container.querySelectorAll('.ui-select-choices-row');
          if (choices.length < 1) {
            throw uiSelectMinErr('choices', "Expected multiple .ui-select-choices-row but got '{0}'.", choices.length);
          }

          if (ctrl.activeIndex < 0) {
            return;
          }

          var highlighted = choices[ctrl.activeIndex];
          var posY = highlighted.offsetTop + highlighted.clientHeight - container[0].scrollTop;
          var height = container[0].offsetHeight;

          if (posY > height) {
            container[0].scrollTop += posY - height;
          } else if (posY < highlighted.clientHeight) {
            if (ctrl.isGrouped && ctrl.activeIndex === 0)
              container[0].scrollTop = 0; //To make group header visible when going all the way up
            else
              container[0].scrollTop -= highlighted.clientHeight - posY;
          }
        }

        var onResize = $$uisDebounce(function() {
          ctrl.sizeSearchInput();
        }, 50);

        angular.element($window).bind('resize', onResize);

        $scope.$on('$destroy', function() {
          ctrl.searchInput.off('keyup keydown tagged blur paste');
          angular.element($window).off('resize', onResize);
        });

        $scope.$watch('$select.activeIndex', function(activeIndex) {
          if (activeIndex)
            $element.find('input').attr(
              'aria-activedescendant',
              'ui-select-choices-row-' + ctrl.generatedId + '-' + activeIndex);
        });

        $scope.$watch('$select.open', function(open) {
          if (!open)
            $element.find('input').removeAttr('aria-activedescendant');
        });
      }]);

  uis.directive('uiSelect',
    ['$document', 'uiSelectConfig', 'uiSelectMinErr', 'uisOffset', '$compile', '$parse', '$timeout',
      function($document, uiSelectConfig, uiSelectMinErr, uisOffset, $compile, $parse, $timeout) {

        return {
          restrict: 'EA',
          templateUrl: function(tElement, tAttrs) {
            var theme = tAttrs.theme || uiSelectConfig.theme;
            return theme + (angular.isDefined(tAttrs.multiple) ? '/select-multiple.tpl.html' : '/select.tpl.html');
          },
          replace: true,
          transclude: true,
          require: ['uiSelect', '^ngModel'],
          scope: true,

          controller: 'uiSelectCtrl',
          controllerAs: '$select',
          compile: function(tElement, tAttrs) {

            // Allow setting ngClass on uiSelect
            var match = /{(.*)}\s*{(.*)}/.exec(tAttrs.ngClass);
            if(match) {
              var combined = '{'+ match[1] +', '+ match[2] +'}';
              tAttrs.ngClass = combined;
              tElement.attr('ng-class', combined);
            }

            //Multiple or Single depending if multiple attribute presence
            if (angular.isDefined(tAttrs.multiple))
              tElement.append('<ui-select-multiple/>').removeAttr('multiple');
            else
              tElement.append('<ui-select-single/>');

            if (tAttrs.inputId)
              tElement.querySelectorAll('input.ui-select-search')[0].id = tAttrs.inputId;

            return function(scope, element, attrs, ctrls, transcludeFn) {

              var $select = ctrls[0];
              var ngModel = ctrls[1];

              $select.generatedId = uiSelectConfig.generateId();
              $select.baseTitle = attrs.title || 'Select box';
              $select.focusserTitle = $select.baseTitle + ' focus';
              $select.focusserId = 'focusser-' + $select.generatedId;

              $select.closeOnSelect = function() {
                if (angular.isDefined(attrs.closeOnSelect)) {
                  return $parse(attrs.closeOnSelect)();
                } else {
                  return uiSelectConfig.closeOnSelect;
                }
              }();

              scope.$watch('skipFocusser', function() {
                var skipFocusser = scope.$eval(attrs.skipFocusser);
                $select.skipFocusser = skipFocusser !== undefined ? skipFocusser : uiSelectConfig.skipFocusser;
              });

              $select.onSelectCallback = $parse(attrs.onSelect);
              $select.onRemoveCallback = $parse(attrs.onRemove);

              //Set reference to ngModel from uiSelectCtrl
              $select.ngModel = ngModel;

              $select.choiceGrouped = function(group){
                return $select.isGrouped && group && group.name;
              };

              if(attrs.tabindex){
                attrs.$observe('tabindex', function(value) {
                  $select.focusInput.attr('tabindex', value);
                  element.removeAttr('tabindex');
                });
              }

              scope.$watch(function () { return scope.$eval(attrs.searchEnabled); }, function(newVal) {
                $select.searchEnabled = newVal !== undefined ? newVal : uiSelectConfig.searchEnabled;
              });

              scope.$watch('sortable', function() {
                var sortable = scope.$eval(attrs.sortable);
                $select.sortable = sortable !== undefined ? sortable : uiSelectConfig.sortable;
              });

              attrs.$observe('backspaceReset', function() {
                // $eval() is needed otherwise we get a string instead of a boolean
                var backspaceReset = scope.$eval(attrs.backspaceReset);
                $select.backspaceReset = backspaceReset !== undefined ? backspaceReset : true;
              });

              attrs.$observe('limit', function() {
                //Limit the number of selections allowed
                $select.limit = (angular.isDefined(attrs.limit)) ? parseInt(attrs.limit, 10) : undefined;
              });

              scope.$watch('removeSelected', function() {
                var removeSelected = scope.$eval(attrs.removeSelected);
                $select.removeSelected = removeSelected !== undefined ? removeSelected : uiSelectConfig.removeSelected;
              });

              attrs.$observe('disabled', function() {
                // No need to use $eval() (thanks to ng-disabled) since we already get a boolean instead of a string
                $select.disabled = attrs.disabled !== undefined ? attrs.disabled : false;
              });

              attrs.$observe('resetSearchInput', function() {
                // $eval() is needed otherwise we get a string instead of a boolean
                var resetSearchInput = scope.$eval(attrs.resetSearchInput);
                $select.resetSearchInput = resetSearchInput !== undefined ? resetSearchInput : true;
              });

              attrs.$observe('paste', function() {
                $select.paste = scope.$eval(attrs.paste);
              });

              attrs.$observe('tagging', function() {
                if(attrs.tagging !== undefined)
                {
                  // $eval() is needed otherwise we get a string instead of a boolean
                  var taggingEval = scope.$eval(attrs.tagging);
                  $select.tagging = {isActivated: true, fct: taggingEval !== true ? taggingEval : undefined};
                }
                else
                {
                  $select.tagging = {isActivated: false, fct: undefined};
                }
              });

              attrs.$observe('taggingLabel', function() {
                if(attrs.tagging !== undefined )
                {
                  // check eval for FALSE, in this case, we disable the labels
                  // associated with tagging
                  if ( attrs.taggingLabel === 'false' ) {
                    $select.taggingLabel = false;
                  }
                  else
                  {
                    $select.taggingLabel = attrs.taggingLabel !== undefined ? attrs.taggingLabel : '(new)';
                  }
                }
              });

              attrs.$observe('taggingTokens', function() {
                if (attrs.tagging !== undefined) {
                  var tokens = attrs.taggingTokens !== undefined ? attrs.taggingTokens.split('|') : [',','ENTER'];
                  $select.taggingTokens = {isActivated: true, tokens: tokens };
                }
              });

              attrs.$observe('spinnerEnabled', function() {
                // $eval() is needed otherwise we get a string instead of a boolean
                var spinnerEnabled = scope.$eval(attrs.spinnerEnabled);
                $select.spinnerEnabled = spinnerEnabled !== undefined ? spinnerEnabled : uiSelectConfig.spinnerEnabled;
              });

              attrs.$observe('spinnerClass', function() {
                var spinnerClass = attrs.spinnerClass;
                $select.spinnerClass = spinnerClass !== undefined ? attrs.spinnerClass : uiSelectConfig.spinnerClass;
              });

              //Automatically gets focus when loaded
              if (angular.isDefined(attrs.autofocus)){
                $timeout(function(){
                  $select.setFocus();
                });
              }

              //Gets focus based on scope event name (e.g. focus-on='SomeEventName')
              if (angular.isDefined(attrs.focusOn)){
                scope.$on(attrs.focusOn, function() {
                  $timeout(function(){
                    $select.setFocus();
                  });
                });
              }

              function onDocumentClick(e) {
                if (!$select.open) return; //Skip it if dropdown is close

                var contains = false;

                if (window.jQuery) {
                  // Firefox 3.6 does not support element.contains()
                  // See Node.contains https://developer.mozilla.org/en-US/docs/Web/API/Node.contains
                  contains = window.jQuery.contains(element[0], e.target);
                } else {
                  contains = element[0].contains(e.target);
                }

                if (!contains && !$select.clickTriggeredSelect) {
                  var skipFocusser;
                  if (!$select.skipFocusser) {
                    //Will lose focus only with certain targets
                    var focusableControls = ['input','button','textarea','select'];
                    var targetController = angular.element(e.target).controller('uiSelect'); //To check if target is other ui-select
                    skipFocusser = targetController && targetController !== $select; //To check if target is other ui-select
                    if (!skipFocusser) skipFocusser =  ~focusableControls.indexOf(e.target.tagName.toLowerCase()); //Check if target is input, button or textarea
                  } else {
                    skipFocusser = true;
                  }
                  $select.close(skipFocusser);
                  scope.$digest();
                }
                $select.clickTriggeredSelect = false;
              }

              // See Click everywhere but here event http://stackoverflow.com/questions/12931369
              $document.on('click', onDocumentClick);

              scope.$on('$destroy', function() {
                $document.off('click', onDocumentClick);
              });

              // Move transcluded elements to their correct position in main template
              transcludeFn(scope, function(clone) {
                // See Transclude in AngularJS http://blog.omkarpatil.com/2012/11/transclude-in-angularjs.html

                // One day jqLite will be replaced by jQuery and we will be able to write:
                // var transcludedElement = clone.filter('.my-class')
                // instead of creating a hackish DOM element:
                var transcluded = angular.element('<div>').append(clone);

                var transcludedMatch = transcluded.querySelectorAll('.ui-select-match');
                transcludedMatch.removeAttr('ui-select-match'); //To avoid loop in case directive as attr
                transcludedMatch.removeAttr('data-ui-select-match'); // Properly handle HTML5 data-attributes
                if (transcludedMatch.length !== 1) {
                  throw uiSelectMinErr('transcluded', "Expected 1 .ui-select-match but got '{0}'.", transcludedMatch.length);
                }
                element.querySelectorAll('.ui-select-match').replaceWith(transcludedMatch);

                var transcludedChoices = transcluded.querySelectorAll('.ui-select-choices');
                transcludedChoices.removeAttr('ui-select-choices'); //To avoid loop in case directive as attr
                transcludedChoices.removeAttr('data-ui-select-choices'); // Properly handle HTML5 data-attributes
                if (transcludedChoices.length !== 1) {
                  throw uiSelectMinErr('transcluded', "Expected 1 .ui-select-choices but got '{0}'.", transcludedChoices.length);
                }
                element.querySelectorAll('.ui-select-choices').replaceWith(transcludedChoices);

                var transcludedNoChoice = transcluded.querySelectorAll('.ui-select-no-choice');
                transcludedNoChoice.removeAttr('ui-select-no-choice'); //To avoid loop in case directive as attr
                transcludedNoChoice.removeAttr('data-ui-select-no-choice'); // Properly handle HTML5 data-attributes
                if (transcludedNoChoice.length == 1) {
                  element.querySelectorAll('.ui-select-no-choice').replaceWith(transcludedNoChoice);
                }
              });

              // Support for appending the select field to the body when its open
              var appendToBody = scope.$eval(attrs.appendToBody);
              if (appendToBody !== undefined ? appendToBody : uiSelectConfig.appendToBody) {
                scope.$watch('$select.open', function(isOpen) {
                  if (isOpen) {
                    positionDropdown();
                  } else {
                    resetDropdown();
                  }
                });

                // Move the dropdown back to its original location when the scope is destroyed. Otherwise
                // it might stick around when the user routes away or the select field is otherwise removed
                scope.$on('$destroy', function() {
                  resetDropdown();
                });
              }

              // Hold on to a reference to the .ui-select-container element for appendToBody support
              var placeholder = null,
                originalWidth = '';

              function positionDropdown() {
                // Remember the absolute position of the element
                var offset = uisOffset(element);

                // Clone the element into a placeholder element to take its original place in the DOM
                placeholder = angular.element('<div class="ui-select-placeholder"></div>');
                placeholder[0].style.width = offset.width + 'px';
                placeholder[0].style.height = offset.height + 'px';
                element.after(placeholder);

                // Remember the original value of the element width inline style, so it can be restored
                // when the dropdown is closed
                originalWidth = element[0].style.width;

                // Now move the actual dropdown element to the end of the body
                $document.find('body').append(element);

                element[0].style.position = 'absolute';
                element[0].style.left = offset.left + 'px';
                element[0].style.top = offset.top + 'px';
                element[0].style.width = offset.width + 'px';
              }

              function resetDropdown() {
                if (placeholder === null) {
                  // The dropdown has not actually been display yet, so there's nothing to reset
                  return;
                }

                // Move the dropdown element back to its original location in the DOM
                placeholder.replaceWith(element);
                placeholder = null;

                element[0].style.position = '';
                element[0].style.left = '';
                element[0].style.top = '';
                element[0].style.width = originalWidth;

                // Set focus back on to the moved element
                $select.setFocus();
              }

              // Hold on to a reference to the .ui-select-dropdown element for direction support.
              var dropdown = null,
                directionUpClassName = 'direction-up';

              // Support changing the direction of the dropdown if there isn't enough space to render it.
              scope.$watch('$select.open', function() {

                if ($select.dropdownPosition === 'auto' || $select.dropdownPosition === 'up'){
                  scope.calculateDropdownPos();
                }

              });

              var setDropdownPosUp = function(offset, offsetDropdown){

                offset = offset || uisOffset(element);
                offsetDropdown = offsetDropdown || uisOffset(dropdown);

                dropdown[0].style.position = 'absolute';
                dropdown[0].style.top = (offsetDropdown.height * -1) + 'px';
                element.addClass(directionUpClassName);

              };

              var setDropdownPosDown = function(offset, offsetDropdown){

                element.removeClass(directionUpClassName);

                offset = offset || uisOffset(element);
                offsetDropdown = offsetDropdown || uisOffset(dropdown);

                dropdown[0].style.position = '';
                dropdown[0].style.top = '';

              };

              var calculateDropdownPosAfterAnimation = function() {
                // Delay positioning the dropdown until all choices have been added so its height is correct.
                $timeout(function() {
                  if ($select.dropdownPosition === 'up') {
                    //Go UP
                    setDropdownPosUp();
                  } else {
                    //AUTO
                    element.removeClass(directionUpClassName);

                    var offset = uisOffset(element);
                    var offsetDropdown = uisOffset(dropdown);

                    //https://code.google.com/p/chromium/issues/detail?id=342307#c4
                    var scrollTop = $document[0].documentElement.scrollTop || $document[0].body.scrollTop; //To make it cross browser (blink, webkit, IE, Firefox).

                    // Determine if the direction of the dropdown needs to be changed.
                    if (offset.top + offset.height + offsetDropdown.height > scrollTop + $document[0].documentElement.clientHeight) {
                      //Go UP
                      setDropdownPosUp(offset, offsetDropdown);
                    }else{
                      //Go DOWN
                      setDropdownPosDown(offset, offsetDropdown);
                    }
                  }

                  // Display the dropdown once it has been positioned.
                  dropdown[0].style.opacity = 1;
                });
              };

              var opened = false;

              scope.calculateDropdownPos = function() {
                if ($select.open) {
                  dropdown = angular.element(element).querySelectorAll('.ui-select-dropdown');

                  if (dropdown.length === 0) {
                    return;
                  }

                  // Hide the dropdown so there is no flicker until $timeout is done executing.
                  if ($select.search === '' && !opened) {
                    dropdown[0].style.opacity = 0;
                    opened = true;
                  }

                  if (!uisOffset(dropdown).height && $select.$animate && $select.$animate.on && $select.$animate.enabled(dropdown)) {
                    var needsCalculated = true;

                    $select.$animate.on('enter', dropdown, function (elem, phase) {
                      if (phase === 'close' && needsCalculated) {
                        calculateDropdownPosAfterAnimation();
                        needsCalculated = false;
                      }
                    });
                  } else {
                    calculateDropdownPosAfterAnimation();
                  }
                } else {
                  if (dropdown === null || dropdown.length === 0) {
                    return;
                  }

                  // Reset the position of the dropdown.
                  dropdown[0].style.opacity = 0;
                  dropdown[0].style.position = '';
                  dropdown[0].style.top = '';
                  element.removeClass(directionUpClassName);
                }
              };
            };
          }
        };
      }]);

  uis.directive('uiSelectMatch', ['uiSelectConfig', function(uiSelectConfig) {
    return {
      restrict: 'EA',
      require: '^uiSelect',
      replace: true,
      transclude: true,
      templateUrl: function(tElement) {
        // Needed so the uiSelect can detect the transcluded content
        tElement.addClass('ui-select-match');

        var parent = tElement.parent();
        // Gets theme attribute from parent (ui-select)
        var theme = getAttribute(parent, 'theme') || uiSelectConfig.theme;
        var multi = angular.isDefined(getAttribute(parent, 'multiple'));

        return theme + (multi ? '/match-multiple.tpl.html' : '/match.tpl.html');
      },
      link: function(scope, element, attrs, $select) {
        $select.lockChoiceExpression = attrs.uiLockChoice;
        attrs.$observe('placeholder', function(placeholder) {
          $select.placeholder = placeholder !== undefined ? placeholder : uiSelectConfig.placeholder;
        });

        function setAllowClear(allow) {
          $select.allowClear = (angular.isDefined(allow)) ? (allow === '') ? true : (allow.toLowerCase() === 'true') : false;
        }

        attrs.$observe('allowClear', setAllowClear);
        setAllowClear(attrs.allowClear);

        if($select.multiple){
          $select.sizeSearchInput();
        }

      }
    };

    function getAttribute(elem, attribute) {
      if (elem[0].hasAttribute(attribute))
        return elem.attr(attribute);

      if (elem[0].hasAttribute('data-' + attribute))
        return elem.attr('data-' + attribute);

      if (elem[0].hasAttribute('x-' + attribute))
        return elem.attr('x-' + attribute);
    }
  }]);

  uis.directive('uiSelectMultiple', ['uiSelectMinErr','$timeout', function(uiSelectMinErr, $timeout) {
    return {
      restrict: 'EA',
      require: ['^uiSelect', '^ngModel'],

      controller: ['$scope','$timeout', function($scope, $timeout){

        var ctrl = this,
          $select = $scope.$select,
          ngModel;

        if (angular.isUndefined($select.selected))
          $select.selected = [];

        //Wait for link fn to inject it
        $scope.$evalAsync(function(){ ngModel = $scope.ngModel; });

        ctrl.activeMatchIndex = -1;

        ctrl.updateModel = function(){
          ngModel.$setViewValue(Date.now()); //Set timestamp as a unique string to force changes
          ctrl.refreshComponent();
        };

        ctrl.refreshComponent = function(){
          //Remove already selected items
          //e.g. When user clicks on a selection, the selected array changes and
          //the dropdown should remove that item
          if($select.refreshItems){
            $select.refreshItems();
          }
          if($select.sizeSearchInput){
            $select.sizeSearchInput();
          }
        };

        // Remove item from multiple select
        ctrl.removeChoice = function(index){

          // if the choice is locked, don't remove it
          if($select.isLocked(null, index)) return false;

          var removedChoice = $select.selected[index];

          var locals = {};
          locals[$select.parserResult.itemName] = removedChoice;

          $select.selected.splice(index, 1);
          ctrl.activeMatchIndex = -1;
          $select.sizeSearchInput();

          // Give some time for scope propagation.
          $timeout(function(){
            $select.onRemoveCallback($scope, {
              $item: removedChoice,
              $model: $select.parserResult.modelMapper($scope, locals)
            });
          });

          ctrl.updateModel();

          return true;
        };

        ctrl.getPlaceholder = function(){
          //Refactor single?
          if($select.selected && $select.selected.length) return;
          return $select.placeholder;
        };


      }],
      controllerAs: '$selectMultiple',

      link: function(scope, element, attrs, ctrls) {

        var $select = ctrls[0];
        var ngModel = scope.ngModel = ctrls[1];
        var $selectMultiple = scope.$selectMultiple;

        //$select.selected = raw selected objects (ignoring any property binding)

        $select.multiple = true;

        //Input that will handle focus
        $select.focusInput = $select.searchInput;

        //Properly check for empty if set to multiple
        ngModel.$isEmpty = function(value) {
          return !value || value.length === 0;
        };

        //From view --> model
        ngModel.$parsers.unshift(function () {
          var locals = {},
            result,
            resultMultiple = [];
          for (var j = $select.selected.length - 1; j >= 0; j--) {
            locals = {};
            locals[$select.parserResult.itemName] = $select.selected[j];
            result = $select.parserResult.modelMapper(scope, locals);
            resultMultiple.unshift(result);
          }
          return resultMultiple;
        });

        // From model --> view
        ngModel.$formatters.unshift(function (inputValue) {
          var data = $select.parserResult && $select.parserResult.source (scope, { $select : {search:''}}), //Overwrite $search
            locals = {},
            result;
          if (!data) return inputValue;
          var resultMultiple = [];
          var checkFnMultiple = function(list, value){
            if (!list || !list.length) return;
            for (var p = list.length - 1; p >= 0; p--) {
              locals[$select.parserResult.itemName] = list[p];
              result = $select.parserResult.modelMapper(scope, locals);
              if($select.parserResult.trackByExp){
                var propsItemNameMatches = /(\w*)\./.exec($select.parserResult.trackByExp);
                var matches = /\.([^\s]+)/.exec($select.parserResult.trackByExp);
                if(propsItemNameMatches && propsItemNameMatches.length > 0 && propsItemNameMatches[1] == $select.parserResult.itemName){
                  if(matches && matches.length>0 && result[matches[1]] == value[matches[1]]){
                    resultMultiple.unshift(list[p]);
                    return true;
                  }
                }
              }
              if (angular.equals(result,value)){
                resultMultiple.unshift(list[p]);
                return true;
              }
            }
            return false;
          };
          if (!inputValue) return resultMultiple; //If ngModel was undefined
          for (var k = inputValue.length - 1; k >= 0; k--) {
            //Check model array of currently selected items
            if (!checkFnMultiple($select.selected, inputValue[k])){
              //Check model array of all items available
              if (!checkFnMultiple(data, inputValue[k])){
                //If not found on previous lists, just add it directly to resultMultiple
                resultMultiple.unshift(inputValue[k]);
              }
            }
          }
          return resultMultiple;
        });

        //Watch for external model changes
        scope.$watchCollection(function(){ return ngModel.$modelValue; }, function(newValue, oldValue) {
          if (oldValue != newValue){
            //update the view value with fresh data from items, if there is a valid model value
            if(angular.isDefined(ngModel.$modelValue)) {
              ngModel.$modelValue = null; //Force scope model value and ngModel value to be out of sync to re-run formatters
            }
            $selectMultiple.refreshComponent();
          }
        });

        ngModel.$render = function() {
          // Make sure that model value is array
          if(!angular.isArray(ngModel.$viewValue)){
            // Have tolerance for null or undefined values
            if (isNil(ngModel.$viewValue)){
              ngModel.$viewValue = [];
            } else {
              throw uiSelectMinErr('multiarr', "Expected model value to be array but got '{0}'", ngModel.$viewValue);
            }
          }
          $select.selected = ngModel.$viewValue;
          $selectMultiple.refreshComponent();
          scope.$evalAsync(); //To force $digest
        };

        scope.$on('uis:select', function (event, item) {
          if($select.selected.length >= $select.limit) {
            return;
          }
          $select.selected.push(item);
          var locals = {};
          locals[$select.parserResult.itemName] = item;

          $timeout(function(){
            $select.onSelectCallback(scope, {
              $item: item,
              $model: $select.parserResult.modelMapper(scope, locals)
            });
          });
          $selectMultiple.updateModel();
        });

        scope.$on('uis:activate', function () {
          $selectMultiple.activeMatchIndex = -1;
        });

        scope.$watch('$select.disabled', function(newValue, oldValue) {
          // As the search input field may now become visible, it may be necessary to recompute its size
          if (oldValue && !newValue) $select.sizeSearchInput();
        });

        $select.searchInput.on('keydown', function(e) {
          var key = e.which;
          scope.$apply(function() {
            var processed = false;
            // var tagged = false; //Checkme
            if(KEY.isHorizontalMovement(key)){
              processed = _handleMatchSelection(key);
            }
            if (processed  && key != KEY.TAB) {
              //TODO Check si el tab selecciona aun correctamente
              //Crear test
              e.preventDefault();
              e.stopPropagation();
            }
          });
        });
        function _getCaretPosition(el) {
          if(angular.isNumber(el.selectionStart)) return el.selectionStart;
          // selectionStart is not supported in IE8 and we don't want hacky workarounds so we compromise
          else return el.value.length;
        }
        // Handles selected options in "multiple" mode
        function _handleMatchSelection(key){
          var caretPosition = _getCaretPosition($select.searchInput[0]),
            length = $select.selected.length,
            // none  = -1,
            first = 0,
            last  = length-1,
            curr  = $selectMultiple.activeMatchIndex,
            next  = $selectMultiple.activeMatchIndex+1,
            prev  = $selectMultiple.activeMatchIndex-1,
            newIndex = curr;

          if(caretPosition > 0 || ($select.search.length && key == KEY.RIGHT)) return false;

          $select.close();

          function getNewActiveMatchIndex(){
            switch(key){
              case KEY.LEFT:
                // Select previous/first item
                if(~$selectMultiple.activeMatchIndex) return prev;
                // Select last item
                else return last;
                break;
              case KEY.RIGHT:
                // Open drop-down
                if(!~$selectMultiple.activeMatchIndex || curr === last){
                  $select.activate();
                  return false;
                }
                // Select next/last item
                else return next;
                break;
              case KEY.BACKSPACE:
                // Remove selected item and select previous/first
                if(~$selectMultiple.activeMatchIndex){
                  if($selectMultiple.removeChoice(curr)) {
                    return prev;
                  } else {
                    return curr;
                  }

                } else {
                  // If nothing yet selected, select last item
                  return last;
                }
                break;
              case KEY.DELETE:
                // Remove selected item and select next item
                if(~$selectMultiple.activeMatchIndex){
                  $selectMultiple.removeChoice($selectMultiple.activeMatchIndex);
                  return curr;
                }
                else return false;
            }
          }

          newIndex = getNewActiveMatchIndex();

          if(!$select.selected.length || newIndex === false) $selectMultiple.activeMatchIndex = -1;
          else $selectMultiple.activeMatchIndex = Math.min(last,Math.max(first,newIndex));

          return true;
        }

        $select.searchInput.on('keyup', function(e) {

          if ( ! KEY.isVerticalMovement(e.which) ) {
            scope.$evalAsync( function () {
              $select.activeIndex = $select.taggingLabel === false ? -1 : 0;
            });
          }
          // Push a "create new" item into array if there is a search string
          if ( $select.tagging.isActivated && $select.search.length > 0 ) {

            // return early with these keys
            if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC || KEY.isVerticalMovement(e.which) ) {
              return;
            }
            // always reset the activeIndex to the first item when tagging
            $select.activeIndex = $select.taggingLabel === false ? -1 : 0;
            // taggingLabel === false bypasses all of this
            if ($select.taggingLabel === false) return;

            var items = angular.copy( $select.items );
            var stashArr = angular.copy( $select.items );
            var newItem;
            var item;
            var hasTag = false;
            var dupeIndex = -1;
            var tagItems;
            var tagItem;

            // case for object tagging via transform `$select.tagging.fct` function
            if ( $select.tagging.fct !== undefined) {
              tagItems = $select.$filter('filter')(items,{'isTag': true});
              if ( tagItems.length > 0 ) {
                tagItem = tagItems[0];
              }
              // remove the first element, if it has the `isTag` prop we generate a new one with each keyup, shaving the previous
              if ( items.length > 0 && tagItem ) {
                hasTag = true;
                items = items.slice(1,items.length);
                stashArr = stashArr.slice(1,stashArr.length);
              }
              newItem = $select.tagging.fct($select.search);
              // verify the new tag doesn't match the value of a possible selection choice or an already selected item.
              if (
                stashArr.some(function (origItem) {
                  return angular.equals(origItem, newItem);
                }) ||
                $select.selected.some(function (origItem) {
                  return angular.equals(origItem, newItem);
                })
              ) {
                scope.$evalAsync(function () {
                  $select.activeIndex = 0;
                  $select.items = items;
                });
                return;
              }
              if (newItem) newItem.isTag = true;
              // handle newItem string and stripping dupes in tagging string context
            } else {
              // find any tagging items already in the $select.items array and store them
              tagItems = $select.$filter('filter')(items,function (item) {
                return item.match($select.taggingLabel);
              });
              if ( tagItems.length > 0 ) {
                tagItem = tagItems[0];
              }
              item = items[0];
              // remove existing tag item if found (should only ever be one tag item)
              if ( item !== undefined && items.length > 0 && tagItem ) {
                hasTag = true;
                items = items.slice(1,items.length);
                stashArr = stashArr.slice(1,stashArr.length);
              }
              newItem = $select.search+' '+$select.taggingLabel;
              if ( _findApproxDupe($select.selected, $select.search) > -1 ) {
                return;
              }
              // verify the the tag doesn't match the value of an existing item from
              // the searched data set or the items already selected
              if ( _findCaseInsensitiveDupe(stashArr.concat($select.selected)) ) {
                // if there is a tag from prev iteration, strip it / queue the change
                // and return early
                if ( hasTag ) {
                  items = stashArr;
                  scope.$evalAsync( function () {
                    $select.activeIndex = 0;
                    $select.items = items;
                  });
                }
                return;
              }
              if ( _findCaseInsensitiveDupe(stashArr) ) {
                // if there is a tag from prev iteration, strip it
                if ( hasTag ) {
                  $select.items = stashArr.slice(1,stashArr.length);
                }
                return;
              }
            }
            if ( hasTag ) dupeIndex = _findApproxDupe($select.selected, newItem);
            // dupe found, shave the first item
            if ( dupeIndex > -1 ) {
              items = items.slice(dupeIndex+1,items.length-1);
            } else {
              items = [];
              if (newItem) items.push(newItem);
              items = items.concat(stashArr);
            }
            scope.$evalAsync( function () {
              $select.activeIndex = 0;
              $select.items = items;

              if ($select.isGrouped) {
                // update item references in groups, so that indexOf will work after angular.copy
                var itemsWithoutTag = newItem ? items.slice(1) : items;
                $select.setItemsFn(itemsWithoutTag);
                if (newItem) {
                  // add tag item as a new group
                  $select.items.unshift(newItem);
                  $select.groups.unshift({name: '', items: [newItem], tagging: true});
                }
              }
            });
          }
        });
        function _findCaseInsensitiveDupe(arr) {
          if ( arr === undefined || $select.search === undefined ) {
            return false;
          }
          var hasDupe = arr.filter( function (origItem) {
            if ( $select.search.toUpperCase() === undefined || origItem === undefined ) {
              return false;
            }
            return origItem.toUpperCase() === $select.search.toUpperCase();
          }).length > 0;

          return hasDupe;
        }
        function _findApproxDupe(haystack, needle) {
          var dupeIndex = -1;
          if(angular.isArray(haystack)) {
            var tempArr = angular.copy(haystack);
            for (var i = 0; i <tempArr.length; i++) {
              // handle the simple string version of tagging
              if ( $select.tagging.fct === undefined ) {
                // search the array for the match
                if ( tempArr[i]+' '+$select.taggingLabel === needle ) {
                  dupeIndex = i;
                }
                // handle the object tagging implementation
              } else {
                var mockObj = tempArr[i];
                if (angular.isObject(mockObj)) {
                  mockObj.isTag = true;
                }
                if ( angular.equals(mockObj, needle) ) {
                  dupeIndex = i;
                }
              }
            }
          }
          return dupeIndex;
        }

        $select.searchInput.on('blur', function() {
          $timeout(function() {
            $selectMultiple.activeMatchIndex = -1;
          });
        });

      }
    };
  }]);

  uis.directive('uiSelectNoChoice',
    ['uiSelectConfig', function (uiSelectConfig) {
      return {
        restrict: 'EA',
        require: '^uiSelect',
        replace: true,
        transclude: true,
        templateUrl: function (tElement) {
          // Needed so the uiSelect can detect the transcluded content
          tElement.addClass('ui-select-no-choice');

          // Gets theme attribute from parent (ui-select)
          var theme = tElement.parent().attr('theme') || uiSelectConfig.theme;
          return theme + '/no-choice.tpl.html';
        }
      };
    }]);

  uis.directive('uiSelectSingle', ['$timeout','$compile', function($timeout, $compile) {
    return {
      restrict: 'EA',
      require: ['^uiSelect', '^ngModel'],
      link: function(scope, element, attrs, ctrls) {

        var $select = ctrls[0];
        var ngModel = ctrls[1];

        //From view --> model
        ngModel.$parsers.unshift(function (inputValue) {
          // Keep original value for undefined and null
          if (isNil(inputValue)) {
            return inputValue;
          }

          var locals = {},
            result;
          locals[$select.parserResult.itemName] = inputValue;
          result = $select.parserResult.modelMapper(scope, locals);
          return result;
        });

        //From model --> view
        ngModel.$formatters.unshift(function (inputValue) {
          // Keep original value for undefined and null
          if (isNil(inputValue)) {
            return inputValue;
          }

          var data = $select.parserResult && $select.parserResult.source (scope, { $select : {search:''}}), //Overwrite $search
            locals = {},
            result;
          if (data){
            var checkFnSingle = function(d){
              locals[$select.parserResult.itemName] = d;
              result = $select.parserResult.modelMapper(scope, locals);
              return result === inputValue;
            };
            //If possible pass same object stored in $select.selected
            if ($select.selected && checkFnSingle($select.selected)) {
              return $select.selected;
            }
            for (var i = data.length - 1; i >= 0; i--) {
              if (checkFnSingle(data[i])) return data[i];
            }
          }
          return inputValue;
        });

        //Update viewValue if model change
        scope.$watch('$select.selected', function(newValue) {
          if (ngModel.$viewValue !== newValue) {
            ngModel.$setViewValue(newValue);
          }
        });

        ngModel.$render = function() {
          $select.selected = ngModel.$viewValue;
        };

        scope.$on('uis:select', function (event, item) {
          $select.selected = item;
          var locals = {};
          locals[$select.parserResult.itemName] = item;

          $timeout(function() {
            $select.onSelectCallback(scope, {
              $item: item,
              $model: isNil(item) ? item : $select.parserResult.modelMapper(scope, locals)
            });
          });
        });

        scope.$on('uis:close', function (event, skipFocusser) {
          $timeout(function(){
            $select.focusser.prop('disabled', false);
            if (!skipFocusser) $select.focusser[0].focus();
          },0,false);
        });

        scope.$on('uis:activate', function () {
          focusser.prop('disabled', true); //Will reactivate it on .close()
        });

        //Idea from: https://github.com/ivaynberg/select2/blob/79b5bf6db918d7560bdd959109b7bcfb47edaf43/select2.js#L1954
        var focusser = angular.element("<input ng-disabled='$select.disabled' class='ui-select-focusser ui-select-offscreen' type='text' id='{{ $select.focusserId }}' aria-label='{{ $select.focusserTitle }}' aria-haspopup='true' role='button' />");
        $compile(focusser)(scope);
        $select.focusser = focusser;

        //Input that will handle focus
        $select.focusInput = focusser;

        element.parent().append(focusser);
        focusser.bind("focus", function(){
          scope.$evalAsync(function(){
            $select.focus = true;
          });
        });
        focusser.bind("blur", function(){
          scope.$evalAsync(function(){
            $select.focus = false;
          });
        });
        focusser.bind("keydown", function(e){

          if (e.which === KEY.BACKSPACE && $select.backspaceReset !== false) {
            e.preventDefault();
            e.stopPropagation();
            $select.select(undefined);
            scope.$apply();
            return;
          }

          if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC) {
            return;
          }

          if (e.which == KEY.DOWN  || e.which == KEY.UP || e.which == KEY.ENTER || e.which == KEY.SPACE){
            e.preventDefault();
            e.stopPropagation();
            $select.activate();
          }

          scope.$digest();
        });

        focusser.bind("keyup input", function(e){

          if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC || e.which == KEY.ENTER || e.which === KEY.BACKSPACE) {
            return;
          }

          $select.activate(focusser.val()); //User pressed some regular key, so we pass it to the search input
          focusser.val('');
          scope.$digest();

        });


      }
    };
  }]);

// Make multiple matches sortable
  uis.directive('uiSelectSort', ['$timeout', 'uiSelectConfig', 'uiSelectMinErr', function($timeout, uiSelectConfig, uiSelectMinErr) {
    return {
      require: ['^^uiSelect', '^ngModel'],
      link: function(scope, element, attrs, ctrls) {
        if (scope[attrs.uiSelectSort] === null) {
          throw uiSelectMinErr('sort', 'Expected a list to sort');
        }

        var $select = ctrls[0];
        var $ngModel = ctrls[1];

        var options = angular.extend({
            axis: 'horizontal'
          },
          scope.$eval(attrs.uiSelectSortOptions));

        var axis = options.axis;
        var draggingClassName = 'dragging';
        var droppingClassName = 'dropping';
        var droppingBeforeClassName = 'dropping-before';
        var droppingAfterClassName = 'dropping-after';

        scope.$watch(function(){
          return $select.sortable;
        }, function(newValue){
          if (newValue) {
            element.attr('draggable', true);
          } else {
            element.removeAttr('draggable');
          }
        });

        element.on('dragstart', function(event) {
          element.addClass(draggingClassName);

          (event.dataTransfer || event.originalEvent.dataTransfer).setData('text', scope.$index.toString());
        });

        element.on('dragend', function() {
          removeClass(draggingClassName);
        });

        var move = function(from, to) {
          /*jshint validthis: true */
          this.splice(to, 0, this.splice(from, 1)[0]);
        };

        var removeClass = function(className) {
          angular.forEach($select.$element.querySelectorAll('.' + className), function(el){
            angular.element(el).removeClass(className);
          });
        };

        var dragOverHandler = function(event) {
          event.preventDefault();

          var offset = axis === 'vertical' ? event.offsetY || event.layerY || (event.originalEvent ? event.originalEvent.offsetY : 0) : event.offsetX || event.layerX || (event.originalEvent ? event.originalEvent.offsetX : 0);

          if (offset < (this[axis === 'vertical' ? 'offsetHeight' : 'offsetWidth'] / 2)) {
            removeClass(droppingAfterClassName);
            element.addClass(droppingBeforeClassName);

          } else {
            removeClass(droppingBeforeClassName);
            element.addClass(droppingAfterClassName);
          }
        };

        var dropTimeout;

        var dropHandler = function(event) {
          event.preventDefault();

          var droppedItemIndex = parseInt((event.dataTransfer || event.originalEvent.dataTransfer).getData('text'), 10);

          // prevent event firing multiple times in firefox
          $timeout.cancel(dropTimeout);
          dropTimeout = $timeout(function() {
            _dropHandler(droppedItemIndex);
          }, 20);
        };

        var _dropHandler = function(droppedItemIndex) {
          var theList = scope.$eval(attrs.uiSelectSort);
          var itemToMove = theList[droppedItemIndex];
          var newIndex = null;

          if (element.hasClass(droppingBeforeClassName)) {
            if (droppedItemIndex < scope.$index) {
              newIndex = scope.$index - 1;
            } else {
              newIndex = scope.$index;
            }
          } else {
            if (droppedItemIndex < scope.$index) {
              newIndex = scope.$index;
            } else {
              newIndex = scope.$index + 1;
            }
          }

          move.apply(theList, [droppedItemIndex, newIndex]);

          $ngModel.$setViewValue(Date.now());

          scope.$apply(function() {
            scope.$emit('uiSelectSort:change', {
              array: theList,
              item: itemToMove,
              from: droppedItemIndex,
              to: newIndex
            });
          });

          removeClass(droppingClassName);
          removeClass(droppingBeforeClassName);
          removeClass(droppingAfterClassName);

          element.off('drop', dropHandler);
        };

        element.on('dragenter', function() {
          if (element.hasClass(draggingClassName)) {
            return;
          }

          element.addClass(droppingClassName);

          element.on('dragover', dragOverHandler);
          element.on('drop', dropHandler);
        });

        element.on('dragleave', function(event) {
          if (event.target != element) {
            return;
          }

          removeClass(droppingClassName);
          removeClass(droppingBeforeClassName);
          removeClass(droppingAfterClassName);

          element.off('dragover', dragOverHandler);
          element.off('drop', dropHandler);
        });
      }
    };
  }]);

  /**
   * Debounces functions
   *
   * Taken from UI Bootstrap $$debounce source code
   * See https://github.com/angular-ui/bootstrap/blob/master/src/debounce/debounce.js
   *
   */
  uis.factory('$$uisDebounce', ['$timeout', function($timeout) {
    return function(callback, debounceTime) {
      var timeoutPromise;

      return function() {
        var self = this;
        var args = Array.prototype.slice.call(arguments);
        if (timeoutPromise) {
          $timeout.cancel(timeoutPromise);
        }

        timeoutPromise = $timeout(function() {
          callback.apply(self, args);
        }, debounceTime);
      };
    };
  }]);

  uis.directive('uisOpenClose', ['$parse', '$timeout', function ($parse, $timeout) {
    return {
      restrict: 'A',
      require: 'uiSelect',
      link: function (scope, element, attrs, $select) {
        $select.onOpenCloseCallback = $parse(attrs.uisOpenClose);

        scope.$watch('$select.open', function (isOpen, previousState) {
          if (isOpen !== previousState) {
            $timeout(function () {
              $select.onOpenCloseCallback(scope, {
                isOpen: isOpen
              });
            });
          }
        });
      }
    };
  }]);

  /**
   * Parses "repeat" attribute.
   *
   * Taken from AngularJS ngRepeat source code
   * See https://github.com/angular/angular.js/blob/v1.2.15/src/ng/directive/ngRepeat.js#L211
   *
   * Original discussion about parsing "repeat" attribute instead of fully relying on ng-repeat:
   * https://github.com/angular-ui/ui-select/commit/5dd63ad#commitcomment-5504697
   */

  uis.service('uisRepeatParser', ['uiSelectMinErr','$parse', function(uiSelectMinErr, $parse) {
    var self = this;

    /**
     * Example:
     * expression = "address in addresses | filter: {street: $select.search} track by $index"
     * itemName = "address",
     * source = "addresses | filter: {street: $select.search}",
     * trackByExp = "$index",
     */
    self.parse = function(expression) {


      var match;
      //var isObjectCollection = /\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)/.test(expression);
      // If an array is used as collection

      // if (isObjectCollection){
      // 000000000000000000000000000000111111111000000000000000222222222222220033333333333333333333330000444444444444444444000000000000000055555555555000000000000000000000066666666600000000
      match = expression.match(/^\s*(?:([\s\S]+?)\s+as\s+)?(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+(\s*[\s\S]+?)?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);

      // 1 Alias
      // 2 Item
      // 3 Key on (key,value)
      // 4 Value on (key,value)
      // 5 Source expression (including filters)
      // 6 Track by

      if (!match) {
        throw uiSelectMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
          expression);
      }

      var source = match[5],
        filters = '';

      // When using (key,value) ui-select requires filters to be extracted, since the object
      // is converted to an array for $select.items
      // (in which case the filters need to be reapplied)
      if (match[3]) {
        // Remove any enclosing parenthesis
        source = match[5].replace(/(^\()|(\)$)/g, '');
        // match all after | but not after ||
        var filterMatch = match[5].match(/^\s*(?:[\s\S]+?)(?:[^\|]|\|\|)+([\s\S]*)\s*$/);
        if(filterMatch && filterMatch[1].trim()) {
          filters = filterMatch[1];
          source = source.replace(filters, '');
        }
      }

      return {
        itemName: match[4] || match[2], // (lhs) Left-hand side,
        keyName: match[3], //for (key, value) syntax
        source: $parse(source),
        filters: filters,
        trackByExp: match[6],
        modelMapper: $parse(match[1] || match[4] || match[2]),
        repeatExpression: function (grouped) {
          var expression = this.itemName + ' in ' + (grouped ? '$group.items' : '$select.items');
          if (this.trackByExp) {
            expression += ' track by ' + this.trackByExp;
          }
          return expression;
        }
      };

    };

    self.getGroupNgRepeatExpression = function() {
      return '$group in $select.groups track by $group.name';
    };

  }]);

}());
angular.module("ui.select").run(["$templateCache", function($templateCache) {$templateCache.put("bootstrap/choices.tpl.html","<ul class=\"ui-select-choices ui-select-choices-content ui-select-dropdown dropdown-menu\" ng-show=\"$select.open && $select.items.length > 0\"><li class=\"ui-select-choices-group\" id=\"ui-select-choices-{{ $select.generatedId }}\"><div class=\"divider\" ng-show=\"$select.isGrouped && $index > 0\"></div><div ng-show=\"$select.isGrouped\" class=\"ui-select-choices-group-label dropdown-header\" ng-bind=\"$group.name\"></div><div ng-attr-id=\"ui-select-choices-row-{{ $select.generatedId }}-{{$index}}\" class=\"ui-select-choices-row\" ng-class=\"{active: $select.isActive(this), disabled: $select.isDisabled(this)}\" role=\"option\"><span class=\"ui-select-choices-row-inner\"></span></div></li></ul>");
  $templateCache.put("bootstrap/match-multiple.tpl.html","<span class=\"ui-select-match\"><span ng-repeat=\"$item in $select.selected track by $index\"><span class=\"ui-select-match-item btn btn-default btn-xs\" tabindex=\"-1\" type=\"button\" ng-disabled=\"$select.disabled\" ng-click=\"$selectMultiple.activeMatchIndex = $index;\" ng-class=\"{\'btn-primary\':$selectMultiple.activeMatchIndex === $index, \'select-locked\':$select.isLocked(this, $index)}\" ui-select-sort=\"$select.selected\"><span class=\"close ui-select-match-close\" ng-hide=\"$select.disabled\" ng-click=\"$selectMultiple.removeChoice($index)\">&nbsp;&times;</span> <span uis-transclude-append=\"\"></span></span></span></span>");
  $templateCache.put("bootstrap/match.tpl.html","<div class=\"ui-select-match\" ng-hide=\"$select.open && $select.searchEnabled\" ng-disabled=\"$select.disabled\" ng-class=\"{\'btn-default-focus\':$select.focus}\"><span tabindex=\"-1\" class=\"btn btn-default form-control ui-select-toggle\" aria-label=\"{{ $select.baseTitle }} activate\" ng-disabled=\"$select.disabled\" ng-click=\"$select.activate()\" style=\"outline: 0;\"><span ng-show=\"$select.isEmpty()\" class=\"ui-select-placeholder text-muted\">{{$select.placeholder}}</span> <span ng-hide=\"$select.isEmpty()\" class=\"ui-select-match-text pull-left\" ng-class=\"{\'ui-select-allow-clear\': $select.allowClear && !$select.isEmpty()}\" ng-transclude=\"\"></span> <i class=\"caret pull-right\" ng-click=\"$select.toggle($event)\"></i> <a ng-show=\"$select.allowClear && !$select.isEmpty() && ($select.disabled !== true)\" aria-label=\"{{ $select.baseTitle }} clear\" style=\"margin-right: 10px\" ng-click=\"$select.clear($event)\" class=\"btn btn-xs btn-link pull-right\"><i class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></i></a></span></div>");
  $templateCache.put("bootstrap/no-choice.tpl.html","<ul class=\"ui-select-no-choice dropdown-menu\" ng-show=\"$select.items.length == 0\"><li ng-transclude=\"\"></li></ul>");
  $templateCache.put("bootstrap/select-multiple.tpl.html","<div class=\"ui-select-container ui-select-multiple ui-select-bootstrap dropdown form-control\" ng-class=\"{open: $select.open}\"><div><div class=\"ui-select-match\"></div><input type=\"search\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" class=\"ui-select-search input-xs\" placeholder=\"{{$selectMultiple.getPlaceholder()}}\" ng-disabled=\"$select.disabled\" ng-click=\"$select.activate()\" ng-model=\"$select.search\" role=\"combobox\" aria-expanded=\"{{$select.open}}\" aria-label=\"{{$select.baseTitle}}\" ng-class=\"{\'spinner\': $select.refreshing}\" ondrop=\"return false;\"></div><div class=\"ui-select-choices\"></div><div class=\"ui-select-no-choice\"></div></div>");
  $templateCache.put("bootstrap/select.tpl.html","<div class=\"ui-select-container ui-select-bootstrap dropdown\" ng-class=\"{open: $select.open}\"><div class=\"ui-select-match\"></div><span ng-show=\"$select.open && $select.refreshing && $select.spinnerEnabled\" class=\"ui-select-refreshing {{$select.spinnerClass}}\"></span> <input type=\"search\" autocomplete=\"off\" tabindex=\"-1\" aria-expanded=\"true\" aria-label=\"{{ $select.baseTitle }}\" aria-owns=\"ui-select-choices-{{ $select.generatedId }}\" class=\"form-control ui-select-search\" ng-class=\"{ \'ui-select-search-hidden\' : !$select.searchEnabled }\" placeholder=\"{{$select.placeholder}}\" ng-model=\"$select.search\" ng-show=\"$select.open\"><div class=\"ui-select-choices\"></div><div class=\"ui-select-no-choice\"></div></div>");
  $templateCache.put("select2/choices.tpl.html","<ul tabindex=\"-1\" class=\"ui-select-choices ui-select-choices-content select2-results\"><li class=\"ui-select-choices-group\" ng-class=\"{\'select2-result-with-children\': $select.choiceGrouped($group) }\"><div ng-show=\"$select.choiceGrouped($group)\" class=\"ui-select-choices-group-label select2-result-label\" ng-bind=\"$group.name\"></div><ul id=\"ui-select-choices-{{ $select.generatedId }}\" ng-class=\"{\'select2-result-sub\': $select.choiceGrouped($group), \'select2-result-single\': !$select.choiceGrouped($group) }\"><li role=\"option\" ng-attr-id=\"ui-select-choices-row-{{ $select.generatedId }}-{{$index}}\" class=\"ui-select-choices-row\" ng-class=\"{\'select2-highlighted\': $select.isActive(this), \'select2-disabled\': $select.isDisabled(this)}\"><div class=\"select2-result-label ui-select-choices-row-inner\"></div></li></ul></li></ul>");
  $templateCache.put("select2/match-multiple.tpl.html","<span class=\"ui-select-match\"><li class=\"ui-select-match-item select2-search-choice\" ng-repeat=\"$item in $select.selected track by $index\" ng-class=\"{\'select2-search-choice-focus\':$selectMultiple.activeMatchIndex === $index, \'select2-locked\':$select.isLocked(this, $index)}\" ui-select-sort=\"$select.selected\"><span uis-transclude-append=\"\"></span> <a href=\"javascript:;\" class=\"ui-select-match-close select2-search-choice-close\" ng-click=\"$selectMultiple.removeChoice($index)\" tabindex=\"-1\"></a></li></span>");
  $templateCache.put("select2/match.tpl.html","<a class=\"select2-choice ui-select-match\" ng-class=\"{\'select2-default\': $select.isEmpty()}\" ng-click=\"$select.toggle($event)\" aria-label=\"{{ $select.baseTitle }} select\"><span ng-show=\"$select.isEmpty()\" class=\"select2-chosen\">{{$select.placeholder}}</span> <span ng-hide=\"$select.isEmpty()\" class=\"select2-chosen\" ng-transclude=\"\"></span> <abbr ng-if=\"$select.allowClear && !$select.isEmpty()\" class=\"select2-search-choice-close\" ng-click=\"$select.clear($event)\"></abbr> <span class=\"select2-arrow ui-select-toggle\"><b></b></span></a>");
  $templateCache.put("select2/no-choice.tpl.html","<div class=\"ui-select-no-choice dropdown\" ng-show=\"$select.items.length == 0\"><div class=\"dropdown-content\"><div data-selectable=\"\" ng-transclude=\"\"></div></div></div>");
  $templateCache.put("select2/select-multiple.tpl.html","<div class=\"ui-select-container ui-select-multiple select2 select2-container select2-container-multi\" ng-class=\"{\'select2-container-active select2-dropdown-open open\': $select.open, \'select2-container-disabled\': $select.disabled}\"><ul class=\"select2-choices\"><span class=\"ui-select-match\"></span><li class=\"select2-search-field\"><input type=\"search\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" role=\"combobox\" aria-expanded=\"true\" aria-owns=\"ui-select-choices-{{ $select.generatedId }}\" aria-label=\"{{ $select.baseTitle }}\" aria-activedescendant=\"ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}\" class=\"select2-input ui-select-search\" placeholder=\"{{$selectMultiple.getPlaceholder()}}\" ng-disabled=\"$select.disabled\" ng-hide=\"$select.disabled\" ng-model=\"$select.search\" ng-click=\"$select.activate()\" style=\"width: 34px;\" ondrop=\"return false;\"></li></ul><div class=\"ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active\" ng-class=\"{\'select2-display-none\': !$select.open || $select.items.length === 0}\"><div class=\"ui-select-choices\"></div></div></div>");
  $templateCache.put("select2/select.tpl.html","<div class=\"ui-select-container select2 select2-container\" ng-class=\"{\'select2-container-active select2-dropdown-open open\': $select.open, \'select2-container-disabled\': $select.disabled, \'select2-container-active\': $select.focus, \'select2-allowclear\': $select.allowClear && !$select.isEmpty()}\"><div class=\"ui-select-match\"></div><div class=\"ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active\" ng-class=\"{\'select2-display-none\': !$select.open}\"><div class=\"search-container\" ng-class=\"{\'ui-select-search-hidden\':!$select.searchEnabled, \'select2-search\':$select.searchEnabled}\"><input type=\"search\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" ng-class=\"{\'select2-active\': $select.refreshing}\" role=\"combobox\" aria-expanded=\"true\" aria-owns=\"ui-select-choices-{{ $select.generatedId }}\" aria-label=\"{{ $select.baseTitle }}\" class=\"ui-select-search select2-input\" ng-model=\"$select.search\"></div><div class=\"ui-select-choices\"></div><div class=\"ui-select-no-choice\"></div></div></div>");
  $templateCache.put("selectize/choices.tpl.html","<div ng-show=\"$select.open\" class=\"ui-select-choices ui-select-dropdown selectize-dropdown\" ng-class=\"{\'single\': !$select.multiple, \'multi\': $select.multiple}\"><div class=\"ui-select-choices-content selectize-dropdown-content\"><div class=\"ui-select-choices-group optgroup\"><div ng-show=\"$select.isGrouped\" class=\"ui-select-choices-group-label optgroup-header\" ng-bind=\"$group.name\"></div><div role=\"option\" class=\"ui-select-choices-row\" ng-class=\"{active: $select.isActive(this), disabled: $select.isDisabled(this)}\"><div class=\"option ui-select-choices-row-inner\" data-selectable=\"\"></div></div></div></div></div>");
  $templateCache.put("selectize/match-multiple.tpl.html","<div class=\"ui-select-match\" data-value=\"\" ng-repeat=\"$item in $select.selected track by $index\" ng-click=\"$selectMultiple.activeMatchIndex = $index;\" ng-class=\"{\'active\':$selectMultiple.activeMatchIndex === $index}\" ui-select-sort=\"$select.selected\"><span class=\"ui-select-match-item\" ng-class=\"{\'select-locked\':$select.isLocked(this, $index)}\"><span uis-transclude-append=\"\"></span> <span class=\"remove ui-select-match-close\" ng-hide=\"$select.disabled\" ng-click=\"$selectMultiple.removeChoice($index)\">&times;</span></span></div>");
  $templateCache.put("selectize/match.tpl.html","<div ng-hide=\"$select.searchEnabled && ($select.open || $select.isEmpty())\" class=\"ui-select-match\"><span ng-show=\"!$select.searchEnabled && ($select.isEmpty() || $select.open)\" class=\"ui-select-placeholder text-muted\">{{$select.placeholder}}</span> <span ng-hide=\"$select.isEmpty() || $select.open\" ng-transclude=\"\"></span></div>");
  $templateCache.put("selectize/no-choice.tpl.html","<div class=\"ui-select-no-choice selectize-dropdown\" ng-show=\"$select.items.length == 0\"><div class=\"selectize-dropdown-content\"><div data-selectable=\"\" ng-transclude=\"\"></div></div></div>");
  $templateCache.put("selectize/select-multiple.tpl.html","<div class=\"ui-select-container selectize-control multi plugin-remove_button\" ng-class=\"{\'open\': $select.open}\"><div class=\"selectize-input\" ng-class=\"{\'focus\': $select.open, \'disabled\': $select.disabled, \'selectize-focus\' : $select.focus}\" ng-click=\"$select.open && !$select.searchEnabled ? $select.toggle($event) : $select.activate()\"><div class=\"ui-select-match\"></div><input type=\"search\" autocomplete=\"off\" tabindex=\"-1\" class=\"ui-select-search\" ng-class=\"{\'ui-select-search-hidden\':!$select.searchEnabled}\" placeholder=\"{{$selectMultiple.getPlaceholder()}}\" ng-model=\"$select.search\" ng-disabled=\"$select.disabled\" aria-expanded=\"{{$select.open}}\" aria-label=\"{{ $select.baseTitle }}\" ondrop=\"return false;\"></div><div class=\"ui-select-choices\"></div><div class=\"ui-select-no-choice\"></div></div>");
  $templateCache.put("selectize/select.tpl.html","<div class=\"ui-select-container selectize-control single\" ng-class=\"{\'open\': $select.open}\"><div class=\"selectize-input\" ng-class=\"{\'focus\': $select.open, \'disabled\': $select.disabled, \'selectize-focus\' : $select.focus}\" ng-click=\"$select.open && !$select.searchEnabled ? $select.toggle($event) : $select.activate()\"><div class=\"ui-select-match\"></div><input type=\"search\" autocomplete=\"off\" tabindex=\"-1\" class=\"ui-select-search ui-select-toggle\" ng-class=\"{\'ui-select-search-hidden\':!$select.searchEnabled}\" ng-click=\"$select.toggle($event)\" placeholder=\"{{$select.placeholder}}\" ng-model=\"$select.search\" ng-hide=\"!$select.isEmpty() && !$select.open\" ng-disabled=\"$select.disabled\" aria-label=\"{{ $select.baseTitle }}\"></div><div class=\"ui-select-choices\"></div><div class=\"ui-select-no-choice\"></div></div>");}]);
