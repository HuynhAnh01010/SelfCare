(function () {
    'use strict';

    angular
        .module('loginappApp')
        .service('FacetecMain', FacetecMain);

    FacetecMain.$inject = ['$rootScope','EIdentityService','registerCertificateObject','PhotoIDMatchProcessor','$state','storageService'];

    function FacetecMain($rootScope,EIdentityService,registerCertificateObject,PhotoIDMatchProcessor,$state,storageService) {

        var latestEnrollmentIdentifier = "";
        var latestSuccessfulServerResult = null;
        var latestSessionResult = null;
        var latestIDScanResult = null;
        var latestProcessor = null;
        var sessionId = null;
        var processId = null;

        function _init(calback) {
            FaceTecSDK.setResourceDirectory("./app/components/FaceTecSDK-browser-9.1.3-Mobile-ID-202104152444/core-sdk/FaceTecSDK.js/resources");
            // Set the directory path for required FaceTec Browser SDK images.
            FaceTecSDK.setImagesDirectory("./app/components/FaceTecSDK-browser-9.1.3-Mobile-ID-202104152444/core-sdk/FaceTec_images");
            // Set your FaceTec Device SDK Customizations.
            FaceTecSDK.setCustomization(Config.retrieveConfigurationWizardCustomization(FaceTecSDK));
            // FaceTecSDK.setFaceTecLoggingMode("ALL");
            // Initialize FaceTec Browser SDK and configure the UI features.
            Config.initializeFromAutogeneratedConfig(FaceTecSDK, function (initializedSuccessfully) {
                console.log("initializedSuccessfully: ",initializedSuccessfully);
                if (initializedSuccessfully) {
                    calback(initializedSuccessfully);
                }
                // SampleAppUtilities.displayStatus(FaceTecSDK.getFriendlyDescriptionForFaceTecSDKStatus(FaceTecSDK.getStatus()));
            });
            // SampleAppUtilities.formatUIForDevice();
        }
        function onLivenessCheckPressed() {
            SampleAppUtilities.fadeOutMainUIAndPrepareForSession();
            // Get a Session Token from the FaceTec SDK, then start the 3D Liveness Check.
            getSessionToken(function (sessionToken) {
                latestProcessor = new LivenessCheckProcessor(sessionToken, FacetecMain);
            });
        }
        // Initiate a 3D Liveness Check, then storing the 3D FaceMap in the Database, also known as "Enrollment".  A random enrollmentIdentifier is generated each time to guarantee uniqueness.
        function onEnrollUserPressed() {
            SampleAppUtilities.fadeOutMainUIAndPrepareForSession();
            // Get a Session Token from the FaceTec SDK, then start the Enrollment.
            getSessionToken(function (sessionToken) {
                latestEnrollmentIdentifier = "browser_sample_app_" + SampleAppUtilities.generateUUId();
                latestProcessor = new EnrollmentProcessor(sessionToken, FacetecMain);
            });
        }
        // Perform 3D to 3D Authentication against the Enrollment previously performed.
        function onAuthenticateUserPressed() {
            // For demonstration purposes, verify that we have an enrollmentIdentifier to Authenticate against.
            if (latestEnrollmentIdentifier.length === 0) {
                SampleAppUtilities.displayStatus("Please enroll first before trying authentication.");
            }
            else {
                SampleAppUtilities.fadeOutMainUIAndPrepareForSession();
                // Get a Session Token from the FaceTec SDK, then start the 3D to 3D Matching.
                getSessionToken(function (sessionToken) {
                    latestProcessor = new AuthenticateProcessor(sessionToken, FacetecMain);
                });
            }
        }
        // Perform a 3D Liveness Check, then an ID Scan, then Match the 3D FaceMap to the ID Scan.
        function onPhotoIDMatchPressed() {
            SampleAppUtilities.fadeOutMainUIAndPrepareForSession();
            // Get a Session Token from the FaceTec SDK, then start the 3D Liveness Check.  On Success, ID Scanning will start automatically.
            getSessionToken(function (sessionToken) {
                latestEnrollmentIdentifier = "browser_sample_app_" + SampleAppUtilities.generateUUId();
                latestProcessor = new PhotoIDMatchProcessor(sessionToken, FacetecMain);
            });
        }

        // Perform a 3D Liveness Check, then an ID Scan, then Match the 3D FaceMap to the ID Scan.
        function onPhotoIDMatchPressedTest(sessionToken) {
            if($rootScope.useLanguage == "vi"){
                FaceTecSDK.configureLocalization(storageService.getLanguageFaceTecStringsVi());
            }else{
                FaceTecSDK.configureLocalization(storageService.getLanguageFaceTecStringsEn());
            }

            SampleAppUtilities.fadeOutMainUIAndPrepareForSession();
            // Get a Session Token from the FaceTec SDK, then start the 3D Liveness Check.  On Success, ID Scanning will start automatically.
            latestEnrollmentIdentifier = "browser_sample_app_" + SampleAppUtilities.generateUUId();
            latestProcessor = new PhotoIDMatchProcessor(sessionToken, this);
        }
        // Show the final result with the Session Review Screen.
        function onComplete(sessionResult, idScanResult,isSuccess,message,error) {

            if (isSuccess) {
                // Show successful message to screen
                registerCertificateObject.latestSessionResult = latestSessionResult;
                registerCertificateObject.latestIDScanResult  = latestIDScanResult ;
                $state.go("userConfirm");
            } else {
                 if(sessionResult == null && idScanResult == null){
                    $rootScope.$broadcast('$kycEvent', {'status':0});
                }else{
                    $rootScope.$broadcast('$kycEvent', {'status':1,'message':message});
                     if(error){
                         $rootScope.$broadcast('$kycInit');
                     }
                }
            }
        }
        // Set a new customization for FaceTec Browser SDK.
        function onDesignShowcasePressed() {
            ThemeHelpers.showNewTheme();
        }
        function onVocalGuidanceSettingsButtonPressed() {
            SampleAppUtilities.setVocalGuidanceMode();
        }
        // Display audit trail images captured from user's last FaceTec Browser SDK Session (if available).
        function onViewAuditTrailPressed() {
            SampleAppUtilities.showAuditTrailImages(latestSessionResult, latestIDScanResult);
        }
        // Get the Session Token from the server
        function getSessionToken(sessionTokenCallback) {
            var XHR = new XMLHttpRequest();
            XHR.open("GET", Config.BaseURL + "/session-token");
            XHR.setRequestHeader("X-Device-Key", Config.DeviceKeyIdentifier);
            XHR.setRequestHeader("X-User-Agent", FaceTecSDK.createFaceTecAPIUserAgentString(""));
            XHR.onreadystatechange = function () {
                if (this.readyState === XMLHttpRequest.DONE) {
                    var sessionToken = "";
                    try {
                        // Attempt to get the sessionToken from the response object.
                        sessionToken = JSON.parse(this.responseText).sessionToken;
                        // Something went wrong in parsing the response. Return an error.
                        if (typeof sessionToken !== "string") {
                            onServerSessionTokenError();
                            return;
                        }
                    }
                    catch (_a) {
                        // Something went wrong in parsing the response. Return an error.
                        onServerSessionTokenError();
                        return;
                    }
                    SampleAppUtilities.hideLoadingSessionToken();
                    sessionTokenCallback(sessionToken);
                }
            };
            // Wait 3s, if the request is not completed yet, show the session token loading screen
            window.setTimeout(function () {
                if (XHR.readyState !== XMLHttpRequest.DONE) {
                    SampleAppUtilities.showLoadingSessionToken();
                }
            }, 3000);
            XHR.onerror = function () {
                onServerSessionTokenError();
            };
            XHR.send();
        }
        function onServerSessionTokenError() {
            SampleAppUtilities.handleErrorGettingServerSessionToken();
        }
        function getLatestEnrollmentIdentifier() {
            return latestEnrollmentIdentifier;
        }
        function clearLatestEnrollmentIdentifier() {
            latestEnrollmentIdentifier = "";
        }
        return {
            _init: _init,
            onLivenessCheckPressed: onLivenessCheckPressed,
            onEnrollUserPressed: onEnrollUserPressed,
            onAuthenticateUserPressed: onAuthenticateUserPressed,
            onPhotoIDMatchPressed: onPhotoIDMatchPressed,
            onPhotoIDMatchPressedTest: onPhotoIDMatchPressedTest,
            onDesignShowcasePressed: onDesignShowcasePressed,
            onComplete: onComplete,
            getLatestEnrollmentIdentifier: getLatestEnrollmentIdentifier,
            clearLatestEnrollmentIdentifier: clearLatestEnrollmentIdentifier,
            onVocalGuidanceSettingsButtonPressed: onVocalGuidanceSettingsButtonPressed,
            onViewAuditTrailPressed: onViewAuditTrailPressed,
            latestSessionResult: latestSessionResult,
            latestIDScanResult: latestIDScanResult
        };
    }
})();
